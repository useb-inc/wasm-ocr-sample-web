!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U():"function"==typeof define&&define.amd?define([],U):"object"==typeof exports?exports.AlcheraAES256SDK=U():Q.AlcheraAES256SDK=U()}(self,(()=>(()=>{"use strict";var __webpack_modules__={204:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar ALCHERA_AES256 = (() => {\n  var _scriptName = "file:///D:/workspace/ns-useb/ocr-face-sdk/builder/encryptionSDK/src/alchera_aes256.js";\n  return function () {\n    var moduleArg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var moduleRtn;\n    var _this2 = this;\n    function _createForOfIteratorHelper(r, e) {\n      var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];\n      if (!t) {\n        if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {\n          t && (r = t);\n          var _n = 0,\n            F = function F() {};\n          return {\n            s: F,\n            n: function n() {\n              return _n >= r.length ? {\n                done: !0\n              } : {\n                done: !1,\n                value: r[_n++]\n              };\n            },\n            e: function e(r) {\n              throw r;\n            },\n            f: F\n          };\n        }\n        throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n      }\n      var o,\n        a = !0,\n        u = !1;\n      return {\n        s: function s() {\n          t = t.call(r);\n        },\n        n: function n() {\n          var r = t.next();\n          return a = r.done, r;\n        },\n        e: function e(r) {\n          u = !0, o = r;\n        },\n        f: function f() {\n          try {\n            a || null == t["return"] || t["return"]();\n          } finally {\n            if (u) throw o;\n          }\n        }\n      };\n    }\n    function _slicedToArray(r, e) {\n      return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n    }\n    function _nonIterableRest() {\n      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n    }\n    function _iterableToArrayLimit(r, l) {\n      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];\n      if (null != t) {\n        var e,\n          n,\n          i,\n          u,\n          a = [],\n          f = !0,\n          o = !1;\n        try {\n          if (i = (t = t.call(r)).next, 0 === l) {\n            if (Object(t) !== t) return;\n            f = !1;\n          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n          o = !0, n = r;\n        } finally {\n          try {\n            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;\n          } finally {\n            if (o) throw n;\n          }\n        }\n        return a;\n      }\n    }\n    function _arrayWithHoles(r) {\n      if (Array.isArray(r)) return r;\n    }\n    function _toConsumableArray(r) {\n      return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n    }\n    function _nonIterableSpread() {\n      throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n    }\n    function _unsupportedIterableToArray(r, a) {\n      if (r) {\n        if ("string" == typeof r) return _arrayLikeToArray(r, a);\n        var t = {}.toString.call(r).slice(8, -1);\n        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n      }\n    }\n    function _iterableToArray(r) {\n      if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);\n    }\n    function _arrayWithoutHoles(r) {\n      if (Array.isArray(r)) return _arrayLikeToArray(r);\n    }\n    function _arrayLikeToArray(r, a) {\n      (null == a || a > r.length) && (a = r.length);\n      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n      return n;\n    }\n    function _callSuper(t, o, e) {\n      return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n    }\n    function _possibleConstructorReturn(t, e) {\n      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;\n      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");\n      return _assertThisInitialized(t);\n    }\n    function _assertThisInitialized(e) {\n      if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n      return e;\n    }\n    function _inherits(t, e) {\n      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");\n      t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n          value: t,\n          writable: !0,\n          configurable: !0\n        }\n      }), Object.defineProperty(t, "prototype", {\n        writable: !1\n      }), e && _setPrototypeOf(t, e);\n    }\n    function _wrapNativeSuper(t) {\n      var r = "function" == typeof Map ? new Map() : void 0;\n      return _wrapNativeSuper = function _wrapNativeSuper(t) {\n        if (null === t || !_isNativeFunction(t)) return t;\n        if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");\n        if (void 0 !== r) {\n          if (r.has(t)) return r.get(t);\n          r.set(t, Wrapper);\n        }\n        function Wrapper() {\n          return _construct(t, arguments, _getPrototypeOf(this).constructor);\n        }\n        return Wrapper.prototype = Object.create(t.prototype, {\n          constructor: {\n            value: Wrapper,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n          }\n        }), _setPrototypeOf(Wrapper, t);\n      }, _wrapNativeSuper(t);\n    }\n    function _construct(t, e, r) {\n      if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n      var o = [null];\n      o.push.apply(o, e);\n      var p = new (t.bind.apply(t, o))();\n      return r && _setPrototypeOf(p, r.prototype), p;\n    }\n    function _isNativeReflectConstruct() {\n      try {\n        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      } catch (t) {}\n      return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n        return !!t;\n      })();\n    }\n    function _isNativeFunction(t) {\n      try {\n        return -1 !== Function.toString.call(t).indexOf("[native code]");\n      } catch (n) {\n        return "function" == typeof t;\n      }\n    }\n    function _setPrototypeOf(t, e) {\n      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n        return t.__proto__ = e, t;\n      }, _setPrototypeOf(t, e);\n    }\n    function _getPrototypeOf(t) {\n      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n        return t.__proto__ || Object.getPrototypeOf(t);\n      }, _getPrototypeOf(t);\n    }\n    function _classCallCheck(a, n) {\n      if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");\n    }\n    function _defineProperties(e, r) {\n      for (var t = 0; t < r.length; t++) {\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n      }\n    }\n    function _createClass(e, r, t) {\n      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {\n        writable: !1\n      }), e;\n    }\n    function _toPropertyKey(t) {\n      var i = _toPrimitive(t, "string");\n      return "symbol" == _typeof(i) ? i : i + "";\n    }\n    function _toPrimitive(t, r) {\n      if ("object" != _typeof(t) || !t) return t;\n      var e = t[Symbol.toPrimitive];\n      if (void 0 !== e) {\n        var i = e.call(t, r || "default");\n        if ("object" != _typeof(i)) return i;\n        throw new TypeError("@@toPrimitive must return a primitive value.");\n      }\n      return ("string" === r ? String : Number)(t);\n    }\n    function _typeof(o) {\n      "@babel/helpers - typeof";\n\n      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {\n        return typeof o;\n      } : function (o) {\n        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;\n      }, _typeof(o);\n    }\n    var Module = moduleArg;\n    var Promise = function () {\n      function noop() {}\n      function bind(fn, thisArg) {\n        return function () {\n          fn.apply(thisArg, arguments);\n        };\n      }\n      function Promise(fn) {\n        if (!(this instanceof Promise)) throw new TypeError("Promises must be constructed via new");\n        if (typeof fn != "function") throw new TypeError("not a function");\n        this._state = 0;\n        this._handled = false;\n        this._value = undefined;\n        this._deferreds = [];\n        doResolve(fn, this);\n      }\n      function handle(self, deferred) {\n        while (self._state === 3) {\n          self = self._value;\n        }\n        if (self._state === 0) {\n          self._deferreds.push(deferred);\n          return;\n        }\n        self._handled = true;\n        Promise._immediateFn(function () {\n          var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n          if (cb === null) {\n            (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n            return;\n          }\n          var ret;\n          try {\n            ret = cb(self._value);\n          } catch (e) {\n            reject(deferred.promise, e);\n            return;\n          }\n          resolve(deferred.promise, ret);\n        });\n      }\n      function resolve(self, newValue) {\n        try {\n          if (newValue === self) throw new TypeError("A promise cannot be resolved with itself.");\n          if (newValue && (_typeof(newValue) == "object" || typeof newValue == "function")) {\n            var then = newValue.then;\n            if (newValue instanceof Promise) {\n              self._state = 3;\n              self._value = newValue;\n              finale(self);\n              return;\n            } else if (typeof then == "function") {\n              doResolve(bind(then, newValue), self);\n              return;\n            }\n          }\n          self._state = 1;\n          self._value = newValue;\n          finale(self);\n        } catch (e) {\n          reject(self, e);\n        }\n      }\n      function reject(self, newValue) {\n        self._state = 2;\n        self._value = newValue;\n        finale(self);\n      }\n      function finale(self) {\n        if (self._state === 2 && self._deferreds.length === 0) {\n          Promise._immediateFn(function () {\n            if (!self._handled) {\n              Promise._unhandledRejectionFn(self._value);\n            }\n          });\n        }\n        for (var i = 0, len = self._deferreds.length; i < len; i++) {\n          handle(self, self._deferreds[i]);\n        }\n        self._deferreds = null;\n      }\n      function Handler(onFulfilled, onRejected, promise) {\n        this.onFulfilled = typeof onFulfilled == "function" ? onFulfilled : null;\n        this.onRejected = typeof onRejected == "function" ? onRejected : null;\n        this.promise = promise;\n      }\n      function doResolve(fn, self) {\n        var done = false;\n        try {\n          fn(function (value) {\n            if (done) return;\n            done = true;\n            resolve(self, value);\n          }, function (reason) {\n            if (done) return;\n            done = true;\n            reject(self, reason);\n          });\n        } catch (ex) {\n          if (done) return;\n          done = true;\n          reject(self, ex);\n        }\n      }\n      Promise.prototype["catch"] = function (onRejected) {\n        return this.then(null, onRejected);\n      };\n      Promise.prototype.then = function (onFulfilled, onRejected) {\n        var prom = new this.constructor(noop);\n        handle(this, new Handler(onFulfilled, onRejected, prom));\n        return prom;\n      };\n      Promise.all = function (arr) {\n        return new Promise(function (resolve, reject) {\n          if (!Array.isArray(arr)) {\n            return reject(new TypeError("Promise.all accepts an array"));\n          }\n          var args = Array.prototype.slice.call(arr);\n          if (args.length === 0) return resolve([]);\n          var remaining = args.length;\n          function res(i, val) {\n            try {\n              if (val && (_typeof(val) == "object" || typeof val == "function")) {\n                var then = val.then;\n                if (typeof then == "function") {\n                  then.call(val, function (val) {\n                    res(i, val);\n                  }, reject);\n                  return;\n                }\n              }\n              args[i] = val;\n              if (--remaining === 0) {\n                resolve(args);\n              }\n            } catch (ex) {\n              reject(ex);\n            }\n          }\n          for (var i = 0; i < args.length; i++) {\n            res(i, args[i]);\n          }\n        });\n      };\n      Promise.resolve = function (value) {\n        if (value && _typeof(value) == "object" && value.constructor == Promise) {\n          return value;\n        }\n        return new Promise(function (resolve) {\n          resolve(value);\n        });\n      };\n      Promise.reject = function (value) {\n        return new Promise(function (resolve, reject) {\n          reject(value);\n        });\n      };\n      Promise.race = function (arr) {\n        return new Promise(function (resolve, reject) {\n          if (!Array.isArray(arr)) {\n            return reject(new TypeError("Promise.race accepts an array"));\n          }\n          for (var i = 0, len = arr.length; i < len; i++) {\n            Promise.resolve(arr[i]).then(resolve, reject);\n          }\n        });\n      };\n      Promise._immediateFn = typeof setImmediate == "function" && function (fn) {\n        setImmediate(fn);\n      } || function (fn) {\n        setTimeout(fn, 0);\n      };\n      Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n        if (typeof console != "undefined" && console) {\n          console.warn("Possible Unhandled Promise Rejection:", err);\n        }\n      };\n      return Promise;\n    }();\n    if (typeof Object.assign == "undefined") {\n      Object.assign = function (target, source) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n          if (!source) continue;\n          for (var key in source) {\n            if (source.hasOwnProperty(key)) target[key] = source[key];\n          }\n        }\n        return target;\n      };\n    }\n    if (typeof globalThis.fetch == "undefined") {\n      globalThis.fetch = function (url, options) {\n        options = options || {};\n        return new Promise(function (resolve, reject) {\n          var request = new XMLHttpRequest();\n          var _keys = [];\n          var headers = {};\n          request.responseType = "arraybuffer";\n          var _response = function response() {\n            return {\n              ok: (request.status / 100 | 0) == 2,\n              statusText: request.statusText,\n              status: request.status,\n              url: request.responseURL,\n              text: function text() {\n                return Promise.resolve(request.responseText);\n              },\n              json: function json() {\n                return Promise.resolve(request.responseText).then(JSON.parse);\n              },\n              blob: function blob() {\n                return Promise.resolve(new Blob([request.response]));\n              },\n              arrayBuffer: function arrayBuffer() {\n                return Promise.resolve(request.response);\n              },\n              clone: _response,\n              headers: {\n                keys: function keys() {\n                  return _keys;\n                },\n                entries: function entries() {\n                  return _keys.map(function (n) {\n                    return [n, request.getResponseHeader(n)];\n                  });\n                },\n                get: function get(n) {\n                  return request.getResponseHeader(n);\n                },\n                has: function has(n) {\n                  return request.getResponseHeader(n) != null;\n                }\n              }\n            };\n          };\n          request.open(options.method || "get", url, true);\n          request.onload = function () {\n            request.getAllResponseHeaders().toLowerCase().replace(/^(.+?):/gm, function (m, key) {\n              headers[key] || _keys.push(headers[key] = key);\n            });\n            resolve(_response());\n          };\n          request.onerror = reject;\n          request.withCredentials = options.credentials == "include";\n          for (var i in options.headers) {\n            request.setRequestHeader(i, options.headers[i]);\n          }\n          request.send(options.body || null);\n        });\n      };\n    }\n    var readyPromiseResolve, readyPromiseReject;\n    var readyPromise = new Promise(function (resolve, reject) {\n      readyPromiseResolve = resolve;\n      readyPromiseReject = reject;\n    });\n    ["_malloc", "_free", "_memory", "___indirect_function_table", "onRuntimeInitialized"].forEach(function (prop) {\n      if (!Object.getOwnPropertyDescriptor(readyPromise, prop)) {\n        Object.defineProperty(readyPromise, prop, {\n          get: function get() {\n            return abort("You are getting " + prop + " on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");\n          },\n          set: function set() {\n            return abort("You are setting " + prop + " on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");\n          }\n        });\n      }\n    });\n    var ENVIRONMENT_IS_WEB = true;\n    var ENVIRONMENT_IS_WORKER = false;\n    var ENVIRONMENT_IS_NODE = false;\n    var ENVIRONMENT_IS_SHELL = false;\n    if (Module["ENVIRONMENT"]) {\n      throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");\n    }\n    var moduleOverrides = Object.assign({}, Module);\n    var arguments_ = [];\n    var thisProgram = "./this.program";\n    var scriptDirectory = "";\n    function locateFile(path) {\n      if (Module["locateFile"]) {\n        return Module["locateFile"](path, scriptDirectory);\n      }\n      return scriptDirectory + path;\n    }\n    var readAsync, readBinary;\n    if (ENVIRONMENT_IS_SHELL) {\n      if ((typeof process === "undefined" ? "undefined" : _typeof(process)) == "object" && "function" === "function" || (typeof window === "undefined" ? "undefined" : _typeof(window)) == "object" || typeof importScripts == "function") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");\n    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = self.location.href;\n      } else if (typeof document != "undefined" && document.currentScript) {\n        scriptDirectory = document.currentScript.src;\n      }\n      if (_scriptName) {\n        scriptDirectory = _scriptName;\n      }\n      if (scriptDirectory.startsWith("blob:")) {\n        scriptDirectory = "";\n      } else {\n        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);\n      }\n      if (!((typeof window === "undefined" ? "undefined" : _typeof(window)) == "object" || typeof importScripts == "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");\n      {\n        readAsync = function readAsync(url) {\n          assert(!isFileURI(url), "readAsync does not work with file:// URLs");\n          return fetch(url, {\n            credentials: "same-origin"\n          }).then(function (response) {\n            if (response.ok) {\n              return response.arrayBuffer();\n            }\n            return Promise.reject(new Error(response.status + " : " + response.url));\n          });\n        };\n      }\n    } else {\n      throw new Error("environment detection error");\n    }\n    var out = Module["print"] || console.log.bind(console);\n    var err = Module["printErr"] || console.error.bind(console);\n    Object.assign(Module, moduleOverrides);\n    moduleOverrides = null;\n    checkIncomingModuleAPI();\n    if (Module["arguments"]) arguments_ = Module["arguments"];\n    legacyModuleProp("arguments", "arguments_");\n    if (Module["thisProgram"]) thisProgram = Module["thisProgram"];\n    legacyModuleProp("thisProgram", "thisProgram");\n    assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");\n    assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");\n    assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");\n    assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");\n    assert(typeof Module["read"] == "undefined", "Module.read option was removed");\n    assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");\n    assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");\n    assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");\n    assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");\n    legacyModuleProp("asm", "wasmExports");\n    legacyModuleProp("readAsync", "readAsync");\n    legacyModuleProp("readBinary", "readBinary");\n    legacyModuleProp("setWindowTitle", "setWindowTitle");\n    assert(!ENVIRONMENT_IS_WORKER, "worker environment detected but not enabled at build time.  Add `worker` to `-sENVIRONMENT` to enable.");\n    assert(!ENVIRONMENT_IS_NODE, "node environment detected but not enabled at build time.  Add `node` to `-sENVIRONMENT` to enable.");\n    assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");\n    var wasmBinary = Module["wasmBinary"];\n    legacyModuleProp("wasmBinary", "wasmBinary");\n    if ((typeof WebAssembly === "undefined" ? "undefined" : _typeof(WebAssembly)) != "object") {\n      err("no native wasm support detected");\n    }\n    var wasmMemory;\n    var ABORT = false;\n    function assert(condition, text) {\n      if (!condition) {\n        abort("Assertion failed" + (text ? ": " + text : ""));\n      }\n    }\n    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n    function updateMemoryViews() {\n      var b = wasmMemory.buffer;\n      Module["HEAP8"] = HEAP8 = new Int8Array(b);\n      Module["HEAP16"] = HEAP16 = new Int16Array(b);\n      Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);\n      Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);\n      Module["HEAP32"] = HEAP32 = new Int32Array(b);\n      Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);\n      Module["HEAPF32"] = HEAPF32 = new Float32Array(b);\n      Module["HEAPF64"] = HEAPF64 = new Float64Array(b);\n    }\n    assert(!Module["STACK_SIZE"], "STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");\n    assert(typeof Int32Array != "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined, "JS engine does not provide full typed array support");\n    assert(!Module["wasmMemory"], "Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally");\n    assert(!Module["INITIAL_MEMORY"], "Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");\n    function writeStackCookie() {\n      var max = _emscripten_stack_get_end2();\n      assert((max & 3) == 0);\n      if (max == 0) {\n        max += 4;\n      }\n      HEAPU32[max >> 2] = 34821223;\n      HEAPU32[max + 4 >> 2] = 2310721022;\n      HEAPU32[0 >> 2] = 1668509029;\n    }\n    function checkStackCookie() {\n      if (ABORT) return;\n      var max = _emscripten_stack_get_end2();\n      if (max == 0) {\n        max += 4;\n      }\n      var cookie1 = HEAPU32[max >> 2];\n      var cookie2 = HEAPU32[max + 4 >> 2];\n      if (cookie1 != 34821223 || cookie2 != 2310721022) {\n        abort("Stack overflow! Stack cookie has been overwritten at ".concat(ptrToString(max), ", expected hex dwords 0x89BACDFE and 0x2135467, but received ").concat(ptrToString(cookie2), " ").concat(ptrToString(cookie1)));\n      }\n      if (HEAPU32[0 >> 2] != 1668509029) {\n        abort("Runtime error: The application has corrupted its heap memory area (address zero)!");\n      }\n    }\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATPOSTRUN__ = [];\n    var runtimeInitialized = false;\n    function preRun() {\n      if (Module["preRun"]) {\n        if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];\n        while (Module["preRun"].length) {\n          addOnPreRun(Module["preRun"].shift());\n        }\n      }\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n    function initRuntime() {\n      assert(!runtimeInitialized);\n      runtimeInitialized = true;\n      checkStackCookie();\n      if (!Module["noFSInit"] && !FS.initialized) FS.init();\n      FS.ignorePermissions = false;\n      TTY.init();\n      callRuntimeCallbacks(__ATINIT__);\n    }\n    function postRun() {\n      checkStackCookie();\n      if (Module["postRun"]) {\n        if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];\n        while (Module["postRun"].length) {\n          addOnPostRun(Module["postRun"].shift());\n        }\n      }\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n    function addOnInit(cb) {\n      __ATINIT__.unshift(cb);\n    }\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    }\n    if (!Math.imul || Math.imul(4294967295, 5) !== -5) Math.imul = function (a, b) {\n      var ah = a >>> 16;\n      var al = a & 65535;\n      var bh = b >>> 16;\n      var bl = b & 65535;\n      return al * bl + (ah * bl + al * bh << 16) | 0;\n    };\n    if (!Math.fround) {\n      var froundBuffer = new Float32Array(1);\n      Math.fround = function (x) {\n        froundBuffer[0] = x;\n        return froundBuffer[0];\n      };\n    }\n    Math.clz32 || (Math.clz32 = function (x) {\n      var n = 32;\n      var y = x >> 16;\n      if (y) {\n        n -= 16;\n        x = y;\n      }\n      y = x >> 8;\n      if (y) {\n        n -= 8;\n        x = y;\n      }\n      y = x >> 4;\n      if (y) {\n        n -= 4;\n        x = y;\n      }\n      y = x >> 2;\n      if (y) {\n        n -= 2;\n        x = y;\n      }\n      y = x >> 1;\n      if (y) return n - 2;\n      return n - x;\n    });\n    Math.trunc || (Math.trunc = function (x) {\n      return x < 0 ? Math.ceil(x) : Math.floor(x);\n    });\n    assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");\n    assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");\n    assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");\n    assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n    var runDependencyTracking = {};\n    function getUniqueRunDependency(id) {\n      var orig = id;\n      while (1) {\n        if (!runDependencyTracking[id]) return id;\n        id = orig + Math.random();\n      }\n    }\n    function addRunDependency(id) {\n      var _Module$monitorRunDep;\n      runDependencies++;\n      (_Module$monitorRunDep = Module["monitorRunDependencies"]) === null || _Module$monitorRunDep === void 0 || _Module$monitorRunDep.call(Module, runDependencies);\n      if (id) {\n        assert(!runDependencyTracking[id]);\n        runDependencyTracking[id] = 1;\n        if (runDependencyWatcher === null && typeof setInterval != "undefined") {\n          runDependencyWatcher = setInterval(function () {\n            if (ABORT) {\n              clearInterval(runDependencyWatcher);\n              runDependencyWatcher = null;\n              return;\n            }\n            var shown = false;\n            for (var dep in runDependencyTracking) {\n              if (!shown) {\n                shown = true;\n                err("still waiting on run dependencies:");\n              }\n              err("dependency: ".concat(dep));\n            }\n            if (shown) {\n              err("(end of list)");\n            }\n          }, 1e4);\n        }\n      } else {\n        err("warning: run dependency added without ID");\n      }\n    }\n    function removeRunDependency(id) {\n      var _Module$monitorRunDep2;\n      runDependencies--;\n      (_Module$monitorRunDep2 = Module["monitorRunDependencies"]) === null || _Module$monitorRunDep2 === void 0 || _Module$monitorRunDep2.call(Module, runDependencies);\n      if (id) {\n        assert(runDependencyTracking[id]);\n        delete runDependencyTracking[id];\n      } else {\n        err("warning: run dependency removed without ID");\n      }\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback();\n        }\n      }\n    }\n    function abort(what) {\n      var _Module$onAbort;\n      (_Module$onAbort = Module["onAbort"]) === null || _Module$onAbort === void 0 || _Module$onAbort.call(Module, what);\n      what = "Aborted(" + what + ")";\n      err(what);\n      ABORT = true;\n      var e = new WebAssembly.RuntimeError(what);\n      readyPromiseReject(e);\n      throw e;\n    }\n    var dataURIPrefix = "data:application/octet-stream;base64,";\n    var isDataURI = function isDataURI(filename) {\n      return filename.startsWith(dataURIPrefix);\n    };\n    var isFileURI = function isFileURI(filename) {\n      return filename.startsWith("file://");\n    };\n    function createExportWrapper(name, nargs) {\n      return function () {\n        assert(runtimeInitialized, "native function `".concat(name, "` called before runtime initialization"));\n        var f = wasmExports[name];\n        assert(f, "exported native function `".concat(name, "` not found"));\n        assert(arguments.length <= nargs, "native function `".concat(name, "` called with ").concat(arguments.length, " args but expects ").concat(nargs));\n        return f.apply(void 0, arguments);\n      };\n    }\n    function findWasmBinary() {\n      if (Module["locateFile"]) {\n        var f = "alchera_aes256.wasm";\n        if (!isDataURI(f)) {\n          return locateFile(f);\n        }\n        return f;\n      }\n      return new URL(/* asset import */ Object(function webpackMissingModule() { var e = new Error("Cannot find module \'alchera_aes256.wasm\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()), __webpack_require__.b).href;\n    }\n    var wasmBinaryFile;\n    function getBinarySync(file) {\n      if (file == wasmBinaryFile && wasmBinary) {\n        return new Uint8Array(wasmBinary);\n      }\n      if (readBinary) {\n        return readBinary(file);\n      }\n      throw "both async and sync fetching of the wasm failed";\n    }\n    function getBinaryPromise(binaryFile) {\n      if (!wasmBinary) {\n        return readAsync(binaryFile).then(function (response) {\n          return new Uint8Array(response);\n        }, function () {\n          return getBinarySync(binaryFile);\n        });\n      }\n      return Promise.resolve().then(function () {\n        return getBinarySync(binaryFile);\n      });\n    }\n    function instantiateArrayBuffer(binaryFile, imports, receiver) {\n      return getBinaryPromise(binaryFile).then(function (binary) {\n        return WebAssembly.instantiate(binary, imports);\n      }).then(receiver, function (reason) {\n        err("failed to asynchronously prepare wasm: ".concat(reason));\n        if (isFileURI(wasmBinaryFile)) {\n          err("warning: Loading from a file URI (".concat(wasmBinaryFile, ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"));\n        }\n        abort(reason);\n      });\n    }\n    function instantiateAsync(binary, binaryFile, imports, callback) {\n      if (!binary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(binaryFile) && typeof fetch == "function") {\n        return fetch(binaryFile, {\n          credentials: "same-origin"\n        }).then(function (response) {\n          var result = WebAssembly.instantiateStreaming(response, imports);\n          return result.then(callback, function (reason) {\n            err("wasm streaming compile failed: ".concat(reason));\n            err("falling back to ArrayBuffer instantiation");\n            return instantiateArrayBuffer(binaryFile, imports, callback);\n          });\n        });\n      }\n      return instantiateArrayBuffer(binaryFile, imports, callback);\n    }\n    function getWasmImports() {\n      return {\n        env: wasmImports,\n        wasi_snapshot_preview1: wasmImports\n      };\n    }\n    function createWasm() {\n      var info = getWasmImports();\n      function receiveInstance(instance, module) {\n        wasmExports = instance.exports;\n        wasmMemory = wasmExports["memory"];\n        assert(wasmMemory, "memory not found in wasm exports");\n        updateMemoryViews();\n        wasmTable = wasmExports["__indirect_function_table"];\n        assert(wasmTable, "table not found in wasm exports");\n        addOnInit(wasmExports["__wasm_call_ctors"]);\n        removeRunDependency("wasm-instantiate");\n        return wasmExports;\n      }\n      addRunDependency("wasm-instantiate");\n      var trueModule = Module;\n      function receiveInstantiationResult(result) {\n        assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");\n        trueModule = null;\n        receiveInstance(result["instance"]);\n      }\n      if (Module["instantiateWasm"]) {\n        try {\n          return Module["instantiateWasm"](info, receiveInstance);\n        } catch (e) {\n          err("Module.instantiateWasm callback failed with error: ".concat(e));\n          readyPromiseReject(e);\n        }\n      }\n      if (!wasmBinaryFile) wasmBinaryFile = findWasmBinary();\n      instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult)["catch"](readyPromiseReject);\n      return {};\n    }\n    var tempDouble;\n    var tempI64;\n    (function () {\n      var h16 = new Int16Array(1);\n      var h8 = new Int8Array(h16.buffer);\n      h16[0] = 25459;\n      if (h8[0] !== 115 || h8[1] !== 99) throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";\n    })();\n    function legacyModuleProp(prop, newName) {\n      var incoming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!Object.getOwnPropertyDescriptor(Module, prop)) {\n        Object.defineProperty(Module, prop, {\n          configurable: true,\n          get: function get() {\n            var extra = incoming ? " (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)" : "";\n            abort("`Module.".concat(prop, "` has been replaced by `").concat(newName, "`") + extra);\n          }\n        });\n      }\n    }\n    function ignoredModuleProp(prop) {\n      if (Object.getOwnPropertyDescriptor(Module, prop)) {\n        abort("`Module.".concat(prop, "` was supplied but `").concat(prop, "` not included in INCOMING_MODULE_JS_API"));\n      }\n    }\n    function isExportedByForceFilesystem(name) {\n      return name === "FS_createPath" || name === "FS_createDataFile" || name === "FS_createPreloadedFile" || name === "FS_unlink" || name === "addRunDependency" || name === "FS_createLazyFile" || name === "FS_createDevice" || name === "removeRunDependency";\n    }\n    function missingGlobal(sym, msg) {\n      if (typeof globalThis != "undefined") {\n        Object.defineProperty(globalThis, sym, {\n          configurable: true,\n          get: function get() {\n            _warnOnce("`".concat(sym, "` is not longer defined by emscripten. ").concat(msg));\n            return undefined;\n          }\n        });\n      }\n    }\n    missingGlobal("buffer", "Please use HEAP8.buffer or wasmMemory.buffer");\n    missingGlobal("asm", "Please use wasmExports instead");\n    function missingLibrarySymbol(sym) {\n      if (typeof globalThis != "undefined" && !Object.getOwnPropertyDescriptor(globalThis, sym)) {\n        Object.defineProperty(globalThis, sym, {\n          configurable: true,\n          get: function get() {\n            var msg = "`".concat(sym, "` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line");\n            var librarySymbol = sym;\n            if (!librarySymbol.startsWith("_")) {\n              librarySymbol = "$" + sym;\n            }\n            msg += " (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=\'".concat(librarySymbol, "\')");\n            if (isExportedByForceFilesystem(sym)) {\n              msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";\n            }\n            _warnOnce(msg);\n            return undefined;\n          }\n        });\n      }\n      unexportedRuntimeSymbol(sym);\n    }\n    function unexportedRuntimeSymbol(sym) {\n      if (!Object.getOwnPropertyDescriptor(Module, sym)) {\n        Object.defineProperty(Module, sym, {\n          configurable: true,\n          get: function get() {\n            var msg = "\'".concat(sym, "\' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)");\n            if (isExportedByForceFilesystem(sym)) {\n              msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";\n            }\n            abort(msg);\n          }\n        });\n      }\n    }\n    var callRuntimeCallbacks = function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        callbacks.shift()(Module);\n      }\n    };\n    var noExitRuntime = Module["noExitRuntime"] || true;\n    var ptrToString = function ptrToString(ptr) {\n      assert(typeof ptr === "number");\n      ptr >>>= 0;\n      return "0x" + ptr.toString(16).padStart(8, "0");\n    };\n    var _warnOnce = function warnOnce(text) {\n      _warnOnce.shown || (_warnOnce.shown = {});\n      if (!_warnOnce.shown[text]) {\n        _warnOnce.shown[text] = 1;\n        err(text);\n      }\n    };\n    var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder() : undefined;\n    var UTF8ArrayToString = function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n      }\n      var str = "";\n      while (idx < endPtr) {\n        var u0 = heapOrArray[idx++];\n        if (!(u0 & 128)) {\n          str += String.fromCharCode(u0);\n          continue;\n        }\n        var u1 = heapOrArray[idx++] & 63;\n        if ((u0 & 224) == 192) {\n          str += String.fromCharCode((u0 & 31) << 6 | u1);\n          continue;\n        }\n        var u2 = heapOrArray[idx++] & 63;\n        if ((u0 & 240) == 224) {\n          u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n        } else {\n          if ((u0 & 248) != 240) _warnOnce("Invalid UTF-8 leading byte " + ptrToString(u0) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");\n          u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n        }\n        if (u0 < 65536) {\n          str += String.fromCharCode(u0);\n        } else {\n          var ch = u0 - 65536;\n          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n        }\n      }\n      return str;\n    };\n    var UTF8ToString = function UTF8ToString(ptr, maxBytesToRead) {\n      assert(typeof ptr == "number", "UTF8ToString expects a number (got ".concat(_typeof(ptr), ")"));\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";\n    };\n    var ___assert_fail = function ___assert_fail(condition, filename, line, func) {\n      abort("Assertion failed: ".concat(UTF8ToString(condition), ", at: ") + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);\n    };\n    var ExceptionInfo = function () {\n      "use strict";\n\n      function ExceptionInfo(excPtr) {\n        _classCallCheck(this, ExceptionInfo);\n        this.excPtr = excPtr;\n        this.ptr = excPtr - 24;\n      }\n      return _createClass(ExceptionInfo, [{\n        key: "set_type",\n        value: function set_type(type) {\n          HEAPU32[this.ptr + 4 >> 2] = type;\n        }\n      }, {\n        key: "get_type",\n        value: function get_type() {\n          return HEAPU32[this.ptr + 4 >> 2];\n        }\n      }, {\n        key: "set_destructor",\n        value: function set_destructor(destructor) {\n          HEAPU32[this.ptr + 8 >> 2] = destructor;\n        }\n      }, {\n        key: "get_destructor",\n        value: function get_destructor() {\n          return HEAPU32[this.ptr + 8 >> 2];\n        }\n      }, {\n        key: "set_caught",\n        value: function set_caught(caught) {\n          caught = caught ? 1 : 0;\n          HEAP8[this.ptr + 12] = caught;\n        }\n      }, {\n        key: "get_caught",\n        value: function get_caught() {\n          return HEAP8[this.ptr + 12] != 0;\n        }\n      }, {\n        key: "set_rethrown",\n        value: function set_rethrown(rethrown) {\n          rethrown = rethrown ? 1 : 0;\n          HEAP8[this.ptr + 13] = rethrown;\n        }\n      }, {\n        key: "get_rethrown",\n        value: function get_rethrown() {\n          return HEAP8[this.ptr + 13] != 0;\n        }\n      }, {\n        key: "init",\n        value: function init(type, destructor) {\n          this.set_adjusted_ptr(0);\n          this.set_type(type);\n          this.set_destructor(destructor);\n        }\n      }, {\n        key: "set_adjusted_ptr",\n        value: function set_adjusted_ptr(adjustedPtr) {\n          HEAPU32[this.ptr + 16 >> 2] = adjustedPtr;\n        }\n      }, {\n        key: "get_adjusted_ptr",\n        value: function get_adjusted_ptr() {\n          return HEAPU32[this.ptr + 16 >> 2];\n        }\n      }]);\n    }();\n    var exceptionLast = 0;\n    var uncaughtExceptionCount = 0;\n    var ___cxa_throw = function ___cxa_throw(ptr, type, destructor) {\n      var info = new ExceptionInfo(ptr);\n      info.init(type, destructor);\n      exceptionLast = ptr;\n      uncaughtExceptionCount++;\n      assert(false, "Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.");\n    };\n    function syscallGetVarargI() {\n      assert(SYSCALLS.varargs != undefined);\n      var ret = HEAP32[+SYSCALLS.varargs >> 2];\n      SYSCALLS.varargs += 4;\n      return ret;\n    }\n    var syscallGetVarargP = syscallGetVarargI;\n    var PATH = {\n      isAbs: function isAbs(path) {\n        return path.charAt(0) === "/";\n      },\n      splitPath: function splitPath(filename) {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },\n      normalizeArray: function normalizeArray(parts, allowAboveRoot) {\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === ".") {\n            parts.splice(i, 1);\n          } else if (last === "..") {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift("..");\n          }\n        }\n        return parts;\n      },\n      normalize: function normalize(path) {\n        var isAbsolute = PATH.isAbs(path),\n          trailingSlash = path.substr(-1) === "/";\n        path = PATH.normalizeArray(path.split("/").filter(function (p) {\n          return !!p;\n        }), !isAbsolute).join("/");\n        if (!path && !isAbsolute) {\n          path = ".";\n        }\n        if (path && trailingSlash) {\n          path += "/";\n        }\n        return (isAbsolute ? "/" : "") + path;\n      },\n      dirname: function dirname(path) {\n        var result = PATH.splitPath(path),\n          root = result[0],\n          dir = result[1];\n        if (!root && !dir) {\n          return ".";\n        }\n        if (dir) {\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },\n      basename: function basename(path) {\n        if (path === "/") return "/";\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, "");\n        var lastSlash = path.lastIndexOf("/");\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash + 1);\n      },\n      join: function join() {\n        for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n          paths[_key] = arguments[_key];\n        }\n        return PATH.normalize(paths.join("/"));\n      },\n      join2: function join2(l, r) {\n        return PATH.normalize(l + "/" + r);\n      }\n    };\n    var initRandomFill = function initRandomFill() {\n      if ((typeof crypto === "undefined" ? "undefined" : _typeof(crypto)) == "object" && typeof crypto["getRandomValues"] == "function") {\n        return function (view) {\n          return crypto.getRandomValues(view);\n        };\n      } else abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: (array) => { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");\n    };\n    var _randomFill = function randomFill(view) {\n      return (_randomFill = initRandomFill())(view);\n    };\n    var PATH_FS = {\n      resolve: function resolve() {\n        var resolvedPath = "",\n          resolvedAbsolute = false;\n        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = i >= 0 ? i < 0 || arguments.length <= i ? undefined : arguments[i] : FS.cwd();\n          if (typeof path != "string") {\n            throw new TypeError("Arguments to path.resolve must be strings");\n          } else if (!path) {\n            return "";\n          }\n          resolvedPath = path + "/" + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n        resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function (p) {\n          return !!p;\n        }), !resolvedAbsolute).join("/");\n        return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";\n      },\n      relative: function relative(from, to) {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== "") break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== "") break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split("/"));\n        var toParts = trim(to.split("/"));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push("..");\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join("/");\n      }\n    };\n    var FS_stdin_getChar_buffer = [];\n    var lengthBytesUTF8 = function lengthBytesUTF8(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var c = str.charCodeAt(i);\n        if (c <= 127) {\n          len++;\n        } else if (c <= 2047) {\n          len += 2;\n        } else if (c >= 55296 && c <= 57343) {\n          len += 4;\n          ++i;\n        } else {\n          len += 3;\n        }\n      }\n      return len;\n    };\n    var stringToUTF8Array = function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n      assert(typeof str === "string", "stringToUTF8Array expects a string (got ".concat(_typeof(str), ")"));\n      if (!(maxBytesToWrite > 0)) return 0;\n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1;\n      for (var i = 0; i < str.length; ++i) {\n        var u = str.charCodeAt(i);\n        if (u >= 55296 && u <= 57343) {\n          var u1 = str.charCodeAt(++i);\n          u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n        }\n        if (u <= 127) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 2047) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 192 | u >> 6;\n          heap[outIdx++] = 128 | u & 63;\n        } else if (u <= 65535) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 224 | u >> 12;\n          heap[outIdx++] = 128 | u >> 6 & 63;\n          heap[outIdx++] = 128 | u & 63;\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          if (u > 1114111) _warnOnce("Invalid Unicode code point " + ptrToString(u) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");\n          heap[outIdx++] = 240 | u >> 18;\n          heap[outIdx++] = 128 | u >> 12 & 63;\n          heap[outIdx++] = 128 | u >> 6 & 63;\n          heap[outIdx++] = 128 | u & 63;\n        }\n      }\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    };\n    function intArrayFromString(stringy, dontAddNull, length) {\n      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n      var u8array = new Array(len);\n      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n      if (dontAddNull) u8array.length = numBytesWritten;\n      return u8array;\n    }\n    var FS_stdin_getChar = function FS_stdin_getChar() {\n      if (!FS_stdin_getChar_buffer.length) {\n        var result = null;\n        if (typeof window != "undefined" && typeof window.prompt == "function") {\n          result = window.prompt("Input: ");\n          if (result !== null) {\n            result += "\\n";\n          }\n        } else {}\n        if (!result) {\n          return null;\n        }\n        FS_stdin_getChar_buffer = intArrayFromString(result, true);\n      }\n      return FS_stdin_getChar_buffer.shift();\n    };\n    var TTY = {\n      ttys: [],\n      init: function init() {},\n      shutdown: function shutdown() {},\n      register: function register(dev, ops) {\n        TTY.ttys[dev] = {\n          input: [],\n          output: [],\n          ops\n        };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },\n      stream_ops: {\n        open: function open(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },\n        close: function close(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        fsync: function fsync(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        read: function read(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset + i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },\n        write: function write(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        }\n      },\n      default_tty_ops: {\n        get_char: function get_char(tty) {\n          return FS_stdin_getChar();\n        },\n        put_char: function put_char(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync: function fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        },\n        ioctl_tcgets: function ioctl_tcgets(tty) {\n          return {\n            c_iflag: 25856,\n            c_oflag: 5,\n            c_cflag: 191,\n            c_lflag: 35387,\n            c_cc: [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n          };\n        },\n        ioctl_tcsets: function ioctl_tcsets(tty, optional_actions, data) {\n          return 0;\n        },\n        ioctl_tiocgwinsz: function ioctl_tiocgwinsz(tty) {\n          return [24, 80];\n        }\n      },\n      default_tty1_ops: {\n        put_char: function put_char(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync: function fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }\n      }\n    };\n    var zeroMemory = function zeroMemory(address, size) {\n      if (!HEAPU8.fill) {\n        for (var i = 0; i < size; i++) {\n          HEAPU8[address + i] = 0;\n        }\n        return;\n      }\n      HEAPU8.fill(0, address, address + size);\n      return address;\n    };\n    var alignMemory = function alignMemory(size, alignment) {\n      assert(alignment, "alignment argument is required");\n      return Math.ceil(size / alignment) * alignment;\n    };\n    var mmapAlloc = function mmapAlloc(size) {\n      size = alignMemory(size, 65536);\n      var ptr = _emscripten_builtin_memalign(65536, size);\n      if (!ptr) return 0;\n      return zeroMemory(ptr, size);\n    };\n    var MEMFS = {\n      ops_table: null,\n      mount: function mount(_mount) {\n        return MEMFS.createNode(null, "/", 16384 | 511, 0);\n      },\n      createNode: function createNode(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          throw new FS.ErrnoError(63);\n        }\n        MEMFS.ops_table || (MEMFS.ops_table = {\n          dir: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              lookup: MEMFS.node_ops.lookup,\n              mknod: MEMFS.node_ops.mknod,\n              rename: MEMFS.node_ops.rename,\n              unlink: MEMFS.node_ops.unlink,\n              rmdir: MEMFS.node_ops.rmdir,\n              readdir: MEMFS.node_ops.readdir,\n              symlink: MEMFS.node_ops.symlink\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek\n            }\n          },\n          file: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek,\n              read: MEMFS.stream_ops.read,\n              write: MEMFS.stream_ops.write,\n              allocate: MEMFS.stream_ops.allocate,\n              mmap: MEMFS.stream_ops.mmap,\n              msync: MEMFS.stream_ops.msync\n            }\n          },\n          link: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              readlink: MEMFS.node_ops.readlink\n            },\n            stream: {}\n          },\n          chrdev: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr\n            },\n            stream: FS.chrdev_stream_ops\n          }\n        });\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0;\n          node.contents = null;\n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },\n      getFileDataAsTypedArray: function getFileDataAsTypedArray(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);\n        return new Uint8Array(node.contents);\n      },\n      expandFileStorage: function expandFileStorage(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return;\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity);\n        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n      },\n      resizeFileStorage: function resizeFileStorage(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null;\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize);\n          if (oldContents) {\n            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));\n          }\n          node.usedBytes = newSize;\n        }\n      },\n      node_ops: {\n        getattr: function getattr(node) {\n          var attr = {};\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },\n        setattr: function setattr(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },\n        lookup: function lookup(parent, name) {\n          throw FS.genericErrors[44];\n        },\n        mknod: function mknod(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },\n        rename: function rename(old_node, new_dir, new_name) {\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {}\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now();\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n        },\n        unlink: function unlink(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        rmdir: function rmdir(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        readdir: function readdir(node) {\n          var entries = [".", ".."];\n          for (var _i = 0, _Object$keys = Object.keys(node.contents); _i < _Object$keys.length; _i++) {\n            var key = _Object$keys[_i];\n            entries.push(key);\n          }\n          return entries;\n        },\n        symlink: function symlink(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },\n        readlink: function readlink(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        }\n      },\n      stream_ops: {\n        read: function read(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          assert(size >= 0);\n          if (size > 8 && contents.subarray) {\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },\n        write: function write(stream, buffer, offset, length, position, canOwn) {\n          assert(!(buffer instanceof ArrayBuffer));\n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n          if (buffer.subarray && (!node.contents || node.contents.subarray)) {\n            if (canOwn) {\n              assert(position === 0, "canOwn must imply no weird position inside the file");\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) {\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) {\n              node.contents.set(buffer.subarray(offset, offset + length), position);\n              return length;\n            }\n          }\n          MEMFS.expandFileStorage(node, position + length);\n          if (node.contents.subarray && buffer.subarray) {\n            node.contents.set(buffer.subarray(offset, offset + length), position);\n          } else {\n            for (var i = 0; i < length; i++) {\n              node.contents[position + i] = buffer[offset + i];\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },\n        llseek: function llseek(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },\n        allocate: function allocate(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n        },\n        mmap: function mmap(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            if (contents) {\n              if (position > 0 || position + length < contents.length) {\n                if (contents.subarray) {\n                  contents = contents.subarray(position, position + length);\n                } else {\n                  contents = Array.prototype.slice.call(contents, position, position + length);\n                }\n              }\n              HEAP8.set(contents, ptr);\n            }\n          }\n          return {\n            ptr,\n            allocated\n          };\n        },\n        msync: function msync(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n          return 0;\n        }\n      }\n    };\n    var asyncLoad = function asyncLoad(url, onload, onerror, noRunDep) {\n      var dep = !noRunDep ? getUniqueRunDependency("al ".concat(url)) : "";\n      readAsync(url).then(function (arrayBuffer) {\n        assert(arrayBuffer, \'Loading data file "\'.concat(url, \'" failed (no arrayBuffer).\'));\n        onload(new Uint8Array(arrayBuffer));\n        if (dep) removeRunDependency(dep);\n      }, function (err) {\n        if (onerror) {\n          onerror();\n        } else {\n          throw \'Loading data file "\'.concat(url, \'" failed.\');\n        }\n      });\n      if (dep) addRunDependency(dep);\n    };\n    var FS_createDataFile = function FS_createDataFile(parent, name, fileData, canRead, canWrite, canOwn) {\n      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);\n    };\n    var preloadPlugins = Module["preloadPlugins"] || [];\n    var FS_handledByPreloadPlugin = function FS_handledByPreloadPlugin(byteArray, fullname, finish, onerror) {\n      if (typeof Browser != "undefined") Browser.init();\n      var handled = false;\n      preloadPlugins.forEach(function (plugin) {\n        if (handled) return;\n        if (plugin["canHandle"](fullname)) {\n          plugin["handle"](byteArray, fullname, finish, onerror);\n          handled = true;\n        }\n      });\n      return handled;\n    };\n    var FS_createPreloadedFile = function FS_createPreloadedFile(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {\n      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n      var dep = getUniqueRunDependency("cp ".concat(fullname));\n      function processData(byteArray) {\n        function finish(byteArray) {\n          preFinish === null || preFinish === void 0 || preFinish();\n          if (!dontCreateFile) {\n            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n          }\n          onload === null || onload === void 0 || onload();\n          removeRunDependency(dep);\n        }\n        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, function () {\n          onerror === null || onerror === void 0 || onerror();\n          removeRunDependency(dep);\n        })) {\n          return;\n        }\n        finish(byteArray);\n      }\n      addRunDependency(dep);\n      if (typeof url == "string") {\n        asyncLoad(url, processData, onerror);\n      } else {\n        processData(url);\n      }\n    };\n    var FS_modeStringToFlags = function FS_modeStringToFlags(str) {\n      var flagModes = {\n        r: 0,\n        "r+": 2,\n        w: 512 | 64 | 1,\n        "w+": 512 | 64 | 2,\n        a: 1024 | 64 | 1,\n        "a+": 1024 | 64 | 2\n      };\n      var flags = flagModes[str];\n      if (typeof flags == "undefined") {\n        throw new Error("Unknown file open mode: ".concat(str));\n      }\n      return flags;\n    };\n    var FS_getMode = function FS_getMode(canRead, canWrite) {\n      var mode = 0;\n      if (canRead) mode |= 292 | 73;\n      if (canWrite) mode |= 146;\n      return mode;\n    };\n    var strError = function strError(errno) {\n      return UTF8ToString(_strerror(errno));\n    };\n    var ERRNO_CODES = {\n      EPERM: 63,\n      ENOENT: 44,\n      ESRCH: 71,\n      EINTR: 27,\n      EIO: 29,\n      ENXIO: 60,\n      E2BIG: 1,\n      ENOEXEC: 45,\n      EBADF: 8,\n      ECHILD: 12,\n      EAGAIN: 6,\n      EWOULDBLOCK: 6,\n      ENOMEM: 48,\n      EACCES: 2,\n      EFAULT: 21,\n      ENOTBLK: 105,\n      EBUSY: 10,\n      EEXIST: 20,\n      EXDEV: 75,\n      ENODEV: 43,\n      ENOTDIR: 54,\n      EISDIR: 31,\n      EINVAL: 28,\n      ENFILE: 41,\n      EMFILE: 33,\n      ENOTTY: 59,\n      ETXTBSY: 74,\n      EFBIG: 22,\n      ENOSPC: 51,\n      ESPIPE: 70,\n      EROFS: 69,\n      EMLINK: 34,\n      EPIPE: 64,\n      EDOM: 18,\n      ERANGE: 68,\n      ENOMSG: 49,\n      EIDRM: 24,\n      ECHRNG: 106,\n      EL2NSYNC: 156,\n      EL3HLT: 107,\n      EL3RST: 108,\n      ELNRNG: 109,\n      EUNATCH: 110,\n      ENOCSI: 111,\n      EL2HLT: 112,\n      EDEADLK: 16,\n      ENOLCK: 46,\n      EBADE: 113,\n      EBADR: 114,\n      EXFULL: 115,\n      ENOANO: 104,\n      EBADRQC: 103,\n      EBADSLT: 102,\n      EDEADLOCK: 16,\n      EBFONT: 101,\n      ENOSTR: 100,\n      ENODATA: 116,\n      ETIME: 117,\n      ENOSR: 118,\n      ENONET: 119,\n      ENOPKG: 120,\n      EREMOTE: 121,\n      ENOLINK: 47,\n      EADV: 122,\n      ESRMNT: 123,\n      ECOMM: 124,\n      EPROTO: 65,\n      EMULTIHOP: 36,\n      EDOTDOT: 125,\n      EBADMSG: 9,\n      ENOTUNIQ: 126,\n      EBADFD: 127,\n      EREMCHG: 128,\n      ELIBACC: 129,\n      ELIBBAD: 130,\n      ELIBSCN: 131,\n      ELIBMAX: 132,\n      ELIBEXEC: 133,\n      ENOSYS: 52,\n      ENOTEMPTY: 55,\n      ENAMETOOLONG: 37,\n      ELOOP: 32,\n      EOPNOTSUPP: 138,\n      EPFNOSUPPORT: 139,\n      ECONNRESET: 15,\n      ENOBUFS: 42,\n      EAFNOSUPPORT: 5,\n      EPROTOTYPE: 67,\n      ENOTSOCK: 57,\n      ENOPROTOOPT: 50,\n      ESHUTDOWN: 140,\n      ECONNREFUSED: 14,\n      EADDRINUSE: 3,\n      ECONNABORTED: 13,\n      ENETUNREACH: 40,\n      ENETDOWN: 38,\n      ETIMEDOUT: 73,\n      EHOSTDOWN: 142,\n      EHOSTUNREACH: 23,\n      EINPROGRESS: 26,\n      EALREADY: 7,\n      EDESTADDRREQ: 17,\n      EMSGSIZE: 35,\n      EPROTONOSUPPORT: 66,\n      ESOCKTNOSUPPORT: 137,\n      EADDRNOTAVAIL: 4,\n      ENETRESET: 39,\n      EISCONN: 30,\n      ENOTCONN: 53,\n      ETOOMANYREFS: 141,\n      EUSERS: 136,\n      EDQUOT: 19,\n      ESTALE: 72,\n      ENOTSUP: 138,\n      ENOMEDIUM: 148,\n      EILSEQ: 25,\n      EOVERFLOW: 61,\n      ECANCELED: 11,\n      ENOTRECOVERABLE: 56,\n      EOWNERDEAD: 62,\n      ESTRPIPE: 135\n    };\n    var FS = {\n      root: null,\n      mounts: [],\n      devices: {},\n      streams: [],\n      nextInode: 1,\n      nameTable: null,\n      currentPath: "/",\n      initialized: false,\n      ignorePermissions: true,\n      ErrnoError: function (_Error) {\n        "use strict";\n\n        function ErrnoError(errno) {\n          var _this;\n          _classCallCheck(this, ErrnoError);\n          _this = _callSuper(this, ErrnoError, [runtimeInitialized ? strError(errno) : ""]);\n          _this.name = "ErrnoError";\n          _this.errno = errno;\n          for (var key in ERRNO_CODES) {\n            if (ERRNO_CODES[key] === errno) {\n              _this.code = key;\n              break;\n            }\n          }\n          return _this;\n        }\n        _inherits(ErrnoError, _Error);\n        return _createClass(ErrnoError);\n      }(_wrapNativeSuper(Error)),\n      genericErrors: {},\n      filesystems: null,\n      syncFSRequests: 0,\n      FSStream: function () {\n        "use strict";\n\n        function FSStream() {\n          _classCallCheck(this, FSStream);\n          this.shared = {};\n        }\n        return _createClass(FSStream, [{\n          key: "object",\n          get: function get() {\n            return this.node;\n          },\n          set: function set(val) {\n            this.node = val;\n          }\n        }, {\n          key: "isRead",\n          get: function get() {\n            return (this.flags & 2097155) !== 1;\n          }\n        }, {\n          key: "isWrite",\n          get: function get() {\n            return (this.flags & 2097155) !== 0;\n          }\n        }, {\n          key: "isAppend",\n          get: function get() {\n            return this.flags & 1024;\n          }\n        }, {\n          key: "flags",\n          get: function get() {\n            return this.shared.flags;\n          },\n          set: function set(val) {\n            this.shared.flags = val;\n          }\n        }, {\n          key: "position",\n          get: function get() {\n            return this.shared.position;\n          },\n          set: function set(val) {\n            this.shared.position = val;\n          }\n        }]);\n      }(),\n      FSNode: function () {\n        "use strict";\n\n        function FSNode(parent, name, mode, rdev) {\n          _classCallCheck(this, FSNode);\n          if (!parent) {\n            parent = this;\n          }\n          this.parent = parent;\n          this.mount = parent.mount;\n          this.mounted = null;\n          this.id = FS.nextInode++;\n          this.name = name;\n          this.mode = mode;\n          this.node_ops = {};\n          this.stream_ops = {};\n          this.rdev = rdev;\n          this.readMode = 292 | 73;\n          this.writeMode = 146;\n        }\n        return _createClass(FSNode, [{\n          key: "read",\n          get: function get() {\n            return (this.mode & this.readMode) === this.readMode;\n          },\n          set: function set(val) {\n            val ? this.mode |= this.readMode : this.mode &= ~this.readMode;\n          }\n        }, {\n          key: "write",\n          get: function get() {\n            return (this.mode & this.writeMode) === this.writeMode;\n          },\n          set: function set(val) {\n            val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;\n          }\n        }, {\n          key: "isFolder",\n          get: function get() {\n            return FS.isDir(this.mode);\n          }\n        }, {\n          key: "isDevice",\n          get: function get() {\n            return FS.isChrdev(this.mode);\n          }\n        }]);\n      }(),\n      lookupPath: function lookupPath(path) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        path = PATH_FS.resolve(path);\n        if (!path) return {\n          path: "",\n          node: null\n        };\n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0\n        };\n        opts = Object.assign(defaults, opts);\n        if (opts.recurse_count > 8) {\n          throw new FS.ErrnoError(32);\n        }\n        var parts = path.split("/").filter(function (p) {\n          return !!p;\n        });\n        var current = FS.root;\n        var current_path = "/";\n        for (var i = 0; i < parts.length; i++) {\n          var islast = i === parts.length - 1;\n          if (islast && opts.parent) {\n            break;\n          }\n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n          if (FS.isMountpoint(current)) {\n            if (!islast || islast && opts.follow_mount) {\n              current = current.mounted.root;\n            }\n          }\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n              var lookup = FS.lookupPath(current_path, {\n                recurse_count: opts.recurse_count + 1\n              });\n              current = lookup.node;\n              if (count++ > 40) {\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n        return {\n          path: current_path,\n          node: current\n        };\n      },\n      getPath: function getPath(node) {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length - 1] !== "/" ? "".concat(mount, "/").concat(path) : mount + path;\n          }\n          path = path ? "".concat(node.name, "/").concat(path) : node.name;\n          node = node.parent;\n        }\n      },\n      hashName: function hashName(parentid, name) {\n        var hash = 0;\n        for (var i = 0; i < name.length; i++) {\n          hash = (hash << 5) - hash + name.charCodeAt(i) | 0;\n        }\n        return (parentid + hash >>> 0) % FS.nameTable.length;\n      },\n      hashAddNode: function hashAddNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },\n      hashRemoveNode: function hashRemoveNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },\n      lookupNode: function lookupNode(parent, name) {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n        return FS.lookup(parent, name);\n      },\n      createNode: function createNode(parent, name, mode, rdev) {\n        assert(_typeof(parent) == "object");\n        var node = new FS.FSNode(parent, name, mode, rdev);\n        FS.hashAddNode(node);\n        return node;\n      },\n      destroyNode: function destroyNode(node) {\n        FS.hashRemoveNode(node);\n      },\n      isRoot: function isRoot(node) {\n        return node === node.parent;\n      },\n      isMountpoint: function isMountpoint(node) {\n        return !!node.mounted;\n      },\n      isFile: function isFile(mode) {\n        return (mode & 61440) === 32768;\n      },\n      isDir: function isDir(mode) {\n        return (mode & 61440) === 16384;\n      },\n      isLink: function isLink(mode) {\n        return (mode & 61440) === 40960;\n      },\n      isChrdev: function isChrdev(mode) {\n        return (mode & 61440) === 8192;\n      },\n      isBlkdev: function isBlkdev(mode) {\n        return (mode & 61440) === 24576;\n      },\n      isFIFO: function isFIFO(mode) {\n        return (mode & 61440) === 4096;\n      },\n      isSocket: function isSocket(mode) {\n        return (mode & 49152) === 49152;\n      },\n      flagsToPermissionString: function flagsToPermissionString(flag) {\n        var perms = ["r", "w", "rw"][flag & 3];\n        if (flag & 512) {\n          perms += "w";\n        }\n        return perms;\n      },\n      nodePermissions: function nodePermissions(node, perms) {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n        if (perms.includes("r") && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes("w") && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes("x") && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },\n      mayLookup: function mayLookup(dir) {\n        if (!FS.isDir(dir.mode)) return 54;\n        var errCode = FS.nodePermissions(dir, "x");\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },\n      mayCreate: function mayCreate(dir, name) {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {}\n        return FS.nodePermissions(dir, "wx");\n      },\n      mayDelete: function mayDelete(dir, name, isdir) {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, "wx");\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },\n      mayOpen: function mayOpen(node, flags) {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },\n      MAX_OPEN_FDS: 4096,\n      nextfd: function nextfd() {\n        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },\n      getStreamChecked: function getStreamChecked(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        return stream;\n      },\n      getStream: function getStream(fd) {\n        return FS.streams[fd];\n      },\n      createStream: function createStream(stream) {\n        var fd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n        assert(fd >= -1);\n        stream = Object.assign(new FS.FSStream(), stream);\n        if (fd == -1) {\n          fd = FS.nextfd();\n        }\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },\n      closeStream: function closeStream(fd) {\n        FS.streams[fd] = null;\n      },\n      dupStream: function dupStream(origStream) {\n        var _stream$stream_ops, _stream$stream_ops$du;\n        var fd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n        var stream = FS.createStream(origStream, fd);\n        (_stream$stream_ops = stream.stream_ops) === null || _stream$stream_ops === void 0 || (_stream$stream_ops$du = _stream$stream_ops.dup) === null || _stream$stream_ops$du === void 0 || _stream$stream_ops$du.call(_stream$stream_ops, stream);\n        return stream;\n      },\n      chrdev_stream_ops: {\n        open: function open(stream) {\n          var _stream$stream_ops$op, _stream$stream_ops2;\n          var device = FS.getDevice(stream.node.rdev);\n          stream.stream_ops = device.stream_ops;\n          (_stream$stream_ops$op = (_stream$stream_ops2 = stream.stream_ops).open) === null || _stream$stream_ops$op === void 0 || _stream$stream_ops$op.call(_stream$stream_ops2, stream);\n        },\n        llseek: function llseek() {\n          throw new FS.ErrnoError(70);\n        }\n      },\n      major: function major(dev) {\n        return dev >> 8;\n      },\n      minor: function minor(dev) {\n        return dev & 255;\n      },\n      makedev: function makedev(ma, mi) {\n        return ma << 8 | mi;\n      },\n      registerDevice: function registerDevice(dev, ops) {\n        FS.devices[dev] = {\n          stream_ops: ops\n        };\n      },\n      getDevice: function getDevice(dev) {\n        return FS.devices[dev];\n      },\n      getMounts: function getMounts(mount) {\n        var mounts = [];\n        var check = [mount];\n        while (check.length) {\n          var m = check.pop();\n          mounts.push(m);\n          check.push.apply(check, _toConsumableArray(m.mounts));\n        }\n        return mounts;\n      },\n      syncfs: function syncfs(populate, callback) {\n        if (typeof populate == "function") {\n          callback = populate;\n          populate = false;\n        }\n        FS.syncFSRequests++;\n        if (FS.syncFSRequests > 1) {\n          err("warning: ".concat(FS.syncFSRequests, " FS.syncfs operations in flight at once, probably just doing extra work"));\n        }\n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n        function doCallback(errCode) {\n          assert(FS.syncFSRequests > 0);\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        }\n        mounts.forEach(function (mount) {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },\n      mount: function mount(type, opts, mountpoint) {\n        if (typeof type == "string") {\n          throw type;\n        }\n        var root = mountpoint === "/";\n        var pseudo = !mountpoint;\n        var node;\n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, {\n            follow_mount: false\n          });\n          mountpoint = lookup.path;\n          node = lookup.node;\n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n        var mount = {\n          type,\n          opts,\n          mountpoint,\n          mounts: []\n        };\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          node.mounted = mount;\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n        return mountRoot;\n      },\n      unmount: function unmount(mountpoint) {\n        var lookup = FS.lookupPath(mountpoint, {\n          follow_mount: false\n        });\n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n        Object.keys(FS.nameTable).forEach(function (hash) {\n          var current = FS.nameTable[hash];\n          while (current) {\n            var next = current.name_next;\n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n            current = next;\n          }\n        });\n        node.mounted = null;\n        var idx = node.mount.mounts.indexOf(mount);\n        assert(idx !== -1);\n        node.mount.mounts.splice(idx, 1);\n      },\n      lookup: function lookup(parent, name) {\n        return parent.node_ops.lookup(parent, name);\n      },\n      mknod: function mknod(path, mode, dev) {\n        var lookup = FS.lookupPath(path, {\n          parent: true\n        });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === "." || name === "..") {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },\n      create: function create(path, mode) {\n        mode = mode !== undefined ? mode : 438;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdir: function mkdir(path, mode) {\n        mode = mode !== undefined ? mode : 511;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdirTree: function mkdirTree(path, mode) {\n        var dirs = path.split("/");\n        var d = "";\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += "/" + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch (e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },\n      mkdev: function mkdev(path, mode, dev) {\n        if (typeof dev == "undefined") {\n          dev = mode;\n          mode = 438;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },\n      symlink: function symlink(oldpath, newpath) {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, {\n          parent: true\n        });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },\n      rename: function rename(old_path, new_path) {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n        var lookup, old_dir, new_dir;\n        lookup = FS.lookupPath(old_path, {\n          parent: true\n        });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, {\n          parent: true\n        });\n        new_dir = lookup.node;\n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n        var old_node = FS.lookupNode(old_dir, old_name);\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== ".") {\n          throw new FS.ErrnoError(28);\n        }\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== ".") {\n          throw new FS.ErrnoError(55);\n        }\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {}\n        if (old_node === new_node) {\n          return;\n        }\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {\n          throw new FS.ErrnoError(10);\n        }\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, "w");\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        FS.hashRemoveNode(old_node);\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n          old_node.parent = new_dir;\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.hashAddNode(old_node);\n        }\n      },\n      rmdir: function rmdir(path) {\n        var lookup = FS.lookupPath(path, {\n          parent: true\n        });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },\n      readdir: function readdir(path) {\n        var lookup = FS.lookupPath(path, {\n          follow: true\n        });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },\n      unlink: function unlink(path) {\n        var lookup = FS.lookupPath(path, {\n          parent: true\n        });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },\n      readlink: function readlink(path) {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n      },\n      stat: function stat(path, dontFollow) {\n        var lookup = FS.lookupPath(path, {\n          follow: !dontFollow\n        });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },\n      lstat: function lstat(path) {\n        return FS.stat(path, true);\n      },\n      chmod: function chmod(path, mode, dontFollow) {\n        var node;\n        if (typeof path == "string") {\n          var lookup = FS.lookupPath(path, {\n            follow: !dontFollow\n          });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: mode & 4095 | node.mode & ~4095,\n          timestamp: Date.now()\n        });\n      },\n      lchmod: function lchmod(path, mode) {\n        FS.chmod(path, mode, true);\n      },\n      fchmod: function fchmod(fd, mode) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chmod(stream.node, mode);\n      },\n      chown: function chown(path, uid, gid, dontFollow) {\n        var node;\n        if (typeof path == "string") {\n          var lookup = FS.lookupPath(path, {\n            follow: !dontFollow\n          });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now()\n        });\n      },\n      lchown: function lchown(path, uid, gid) {\n        FS.chown(path, uid, gid, true);\n      },\n      fchown: function fchown(fd, uid, gid) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chown(stream.node, uid, gid);\n      },\n      truncate: function truncate(path, len) {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == "string") {\n          var lookup = FS.lookupPath(path, {\n            follow: true\n          });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, "w");\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now()\n        });\n      },\n      ftruncate: function ftruncate(fd, len) {\n        var stream = FS.getStreamChecked(fd);\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },\n      utime: function utime(path, atime, mtime) {\n        var lookup = FS.lookupPath(path, {\n          follow: true\n        });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime)\n        });\n      },\n      open: function open(path, flags, mode) {\n        if (path === "") {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == "string" ? FS_modeStringToFlags(flags) : flags;\n        if (flags & 64) {\n          mode = typeof mode == "undefined" ? 438 : mode;\n          mode = mode & 4095 | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (_typeof(path) == "object") {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072)\n            });\n            node = lookup.node;\n          } catch (e) {}\n        }\n        var created = false;\n        if (flags & 64) {\n          if (node) {\n            if (flags & 128) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n        if (flags & 65536 && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        if (flags & 512 && !created) {\n          FS.truncate(node, 0);\n        }\n        flags &= ~(128 | 512 | 131072);\n        var stream = FS.createStream({\n          node,\n          path: FS.getPath(node),\n          flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n          ungotten: [],\n          error: false\n        });\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module["logReadFiles"] && !(flags & 1)) {\n          if (!FS.readFiles) FS.readFiles = {};\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },\n      close: function close(stream) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null;\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },\n      isClosed: function isClosed(stream) {\n        return stream.fd === null;\n      },\n      llseek: function llseek(stream, offset, whence) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },\n      read: function read(stream, buffer, offset, length, position) {\n        assert(offset >= 0);\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != "undefined";\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },\n      write: function write(stream, buffer, offset, length, position, canOwn) {\n        assert(offset >= 0);\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != "undefined";\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },\n      allocate: function allocate(stream, offset, length) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },\n      mmap: function mmap(stream, length, position, prot, flags) {\n        if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!length) {\n          throw new FS.ErrnoError(28);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },\n      msync: function msync(stream, buffer, offset, length, mmapFlags) {\n        assert(offset >= 0);\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n      },\n      ioctl: function ioctl(stream, cmd, arg) {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },\n      readFile: function readFile(path) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || "binary";\n        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {\n          throw new Error(\'Invalid encoding type "\'.concat(opts.encoding, \'"\'));\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === "utf8") {\n          ret = UTF8ArrayToString(buf, 0);\n        } else if (opts.encoding === "binary") {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },\n      writeFile: function writeFile(path, data) {\n        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == "string") {\n          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error("Unsupported data type");\n        }\n        FS.close(stream);\n      },\n      cwd: function cwd() {\n        return FS.currentPath;\n      },\n      chdir: function chdir(path) {\n        var lookup = FS.lookupPath(path, {\n          follow: true\n        });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, "x");\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },\n      createDefaultDirectories: function createDefaultDirectories() {\n        FS.mkdir("/tmp");\n        FS.mkdir("/home");\n        FS.mkdir("/home/web_user");\n      },\n      createDefaultDevices: function createDefaultDevices() {\n        FS.mkdir("/dev");\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: function read() {\n            return 0;\n          },\n          write: function write(stream, buffer, offset, length, pos) {\n            return length;\n          }\n        });\n        FS.mkdev("/dev/null", FS.makedev(1, 3));\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev("/dev/tty", FS.makedev(5, 0));\n        FS.mkdev("/dev/tty1", FS.makedev(6, 0));\n        var randomBuffer = new Uint8Array(1024),\n          randomLeft = 0;\n        var randomByte = function randomByte() {\n          if (randomLeft === 0) {\n            randomLeft = _randomFill(randomBuffer).byteLength;\n          }\n          return randomBuffer[--randomLeft];\n        };\n        FS.createDevice("/dev", "random", randomByte);\n        FS.createDevice("/dev", "urandom", randomByte);\n        FS.mkdir("/dev/shm");\n        FS.mkdir("/dev/shm/tmp");\n      },\n      createSpecialDirectories: function createSpecialDirectories() {\n        FS.mkdir("/proc");\n        var proc_self = FS.mkdir("/proc/self");\n        FS.mkdir("/proc/self/fd");\n        FS.mount({\n          mount: function mount() {\n            var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);\n            node.node_ops = {\n              lookup: function lookup(parent, name) {\n                var fd = +name;\n                var stream = FS.getStreamChecked(fd);\n                var ret = {\n                  parent: null,\n                  mount: {\n                    mountpoint: "fake"\n                  },\n                  node_ops: {\n                    readlink: function readlink() {\n                      return stream.path;\n                    }\n                  }\n                };\n                ret.parent = ret;\n                return ret;\n              }\n            };\n            return node;\n          }\n        }, {}, "/proc/self/fd");\n      },\n      createStandardStreams: function createStandardStreams(input, output, error) {\n        if (input) {\n          FS.createDevice("/dev", "stdin", input);\n        } else {\n          FS.symlink("/dev/tty", "/dev/stdin");\n        }\n        if (output) {\n          FS.createDevice("/dev", "stdout", null, output);\n        } else {\n          FS.symlink("/dev/tty", "/dev/stdout");\n        }\n        if (error) {\n          FS.createDevice("/dev", "stderr", null, error);\n        } else {\n          FS.symlink("/dev/tty1", "/dev/stderr");\n        }\n        var stdin = FS.open("/dev/stdin", 0);\n        var stdout = FS.open("/dev/stdout", 1);\n        var stderr = FS.open("/dev/stderr", 1);\n        assert(stdin.fd === 0, "invalid handle for stdin (".concat(stdin.fd, ")"));\n        assert(stdout.fd === 1, "invalid handle for stdout (".concat(stdout.fd, ")"));\n        assert(stderr.fd === 2, "invalid handle for stderr (".concat(stderr.fd, ")"));\n      },\n      staticInit: function staticInit() {\n        [44].forEach(function (code) {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = "<generic error, no stack>";\n        });\n        FS.nameTable = new Array(4096);\n        FS.mount(MEMFS, {}, "/");\n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n        FS.filesystems = {\n          MEMFS\n        };\n      },\n      init: function init(input, output, error) {\n        var _input, _output, _error;\n        assert(!FS.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");\n        FS.initialized = true;\n        (_input = input) !== null && _input !== void 0 ? _input : input = Module["stdin"];\n        (_output = output) !== null && _output !== void 0 ? _output : output = Module["stdout"];\n        (_error = error) !== null && _error !== void 0 ? _error : error = Module["stderr"];\n        FS.createStandardStreams(input, output, error);\n      },\n      quit: function quit() {\n        FS.initialized = false;\n        _fflush(0);\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },\n      findObject: function findObject(path, dontResolveLastLink) {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },\n      analyzePath: function analyzePath(path, dontResolveLastLink) {\n        try {\n          var lookup = FS.lookupPath(path, {\n            follow: !dontResolveLastLink\n          });\n          path = lookup.path;\n        } catch (e) {}\n        var ret = {\n          isRoot: false,\n          exists: false,\n          error: 0,\n          name: null,\n          path: null,\n          object: null,\n          parentExists: false,\n          parentPath: null,\n          parentObject: null\n        };\n        try {\n          var lookup = FS.lookupPath(path, {\n            parent: true\n          });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, {\n            follow: !dontResolveLastLink\n          });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === "/";\n        } catch (e) {\n          ret.error = e.errno;\n        }\n        return ret;\n      },\n      createPath: function createPath(parent, path, canRead, canWrite) {\n        parent = typeof parent == "string" ? parent : FS.getPath(parent);\n        var parts = path.split("/").reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {}\n          parent = current;\n        }\n        return current;\n      },\n      createFile: function createFile(parent, name, properties, canRead, canWrite) {\n        var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);\n        var mode = FS_getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },\n      createDataFile: function createDataFile(parent, name, data, canRead, canWrite, canOwn) {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == "string" ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS_getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == "string") {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n      },\n      createDevice: function createDevice(parent, name, input, output) {\n        var path = PATH.join2(typeof parent == "string" ? parent : FS.getPath(parent), name);\n        var mode = FS_getMode(!!input, !!output);\n        if (!FS.createDevice.major) FS.createDevice.major = 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n        FS.registerDevice(dev, {\n          open: function open(stream) {\n            stream.seekable = false;\n          },\n          close: function close(stream) {\n            var _output$buffer;\n            if (output !== null && output !== void 0 && (_output$buffer = output.buffer) !== null && _output$buffer !== void 0 && _output$buffer.length) {\n              output(10);\n            }\n          },\n          read: function read(stream, buffer, offset, length, pos) {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset + i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: function write(stream, buffer, offset, length, pos) {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset + i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        });\n        return FS.mkdev(path, mode, dev);\n      },\n      forceLoadFile: function forceLoadFile(obj) {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n        if (typeof XMLHttpRequest != "undefined") {\n          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");\n        } else {\n          try {\n            obj.contents = readBinary(obj.url);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        }\n      },\n      createLazyFile: function createLazyFile(parent, name, url, canRead, canWrite) {\n        var LazyUint8Array = function () {\n          "use strict";\n\n          function LazyUint8Array() {\n            _classCallCheck(this, LazyUint8Array);\n            this.lengthKnown = false;\n            this.chunks = [];\n          }\n          return _createClass(LazyUint8Array, [{\n            key: "get",\n            value: function get(idx) {\n              if (idx > this.length - 1 || idx < 0) {\n                return undefined;\n              }\n              var chunkOffset = idx % this.chunkSize;\n              var chunkNum = idx / this.chunkSize | 0;\n              return this.getter(chunkNum)[chunkOffset];\n            }\n          }, {\n            key: "setDataGetter",\n            value: function setDataGetter(getter) {\n              this.getter = getter;\n            }\n          }, {\n            key: "cacheLength",\n            value: function cacheLength() {\n              var xhr = new XMLHttpRequest();\n              xhr.open("HEAD", url, false);\n              xhr.send(null);\n              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn\'t load " + url + ". Status: " + xhr.status);\n              var datalength = Number(xhr.getResponseHeader("Content-length"));\n              var header;\n              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";\n              var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";\n              var chunkSize = 1024 * 1024;\n              if (!hasByteServing) chunkSize = datalength;\n              var doXHR = function doXHR(from, to) {\n                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");\n                if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");\n                var xhr = new XMLHttpRequest();\n                xhr.open("GET", url, false);\n                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);\n                xhr.responseType = "arraybuffer";\n                if (xhr.overrideMimeType) {\n                  xhr.overrideMimeType("text/plain; charset=x-user-defined");\n                }\n                xhr.send(null);\n                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn\'t load " + url + ". Status: " + xhr.status);\n                if (xhr.response !== undefined) {\n                  return new Uint8Array(xhr.response || []);\n                }\n                return intArrayFromString(xhr.responseText || "", true);\n              };\n              var lazyArray = this;\n              lazyArray.setDataGetter(function (chunkNum) {\n                var start = chunkNum * chunkSize;\n                var end = (chunkNum + 1) * chunkSize - 1;\n                end = Math.min(end, datalength - 1);\n                if (typeof lazyArray.chunks[chunkNum] == "undefined") {\n                  lazyArray.chunks[chunkNum] = doXHR(start, end);\n                }\n                if (typeof lazyArray.chunks[chunkNum] == "undefined") throw new Error("doXHR failed!");\n                return lazyArray.chunks[chunkNum];\n              });\n              if (usesGzip || !datalength) {\n                chunkSize = datalength = 1;\n                datalength = this.getter(0).length;\n                chunkSize = datalength;\n                out("LazyFiles on gzip forces download of the whole file when length is accessed");\n              }\n              this._length = datalength;\n              this._chunkSize = chunkSize;\n              this.lengthKnown = true;\n            }\n          }, {\n            key: "length",\n            get: function get() {\n              if (!this.lengthKnown) {\n                this.cacheLength();\n              }\n              return this._length;\n            }\n          }, {\n            key: "chunkSize",\n            get: function get() {\n              if (!this.lengthKnown) {\n                this.cacheLength();\n              }\n              return this._chunkSize;\n            }\n          }]);\n        }();\n        if (typeof XMLHttpRequest != "undefined") {\n          if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";\n          var lazyArray = new LazyUint8Array();\n          var properties = {\n            isDevice: false,\n            contents: lazyArray\n          };\n        } else {\n          var properties = {\n            isDevice: false,\n            url\n          };\n        }\n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: function get() {\n              return this.contents.length;\n            }\n          }\n        });\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach(function (key) {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = function () {\n            FS.forceLoadFile(node);\n            return fn.apply(void 0, arguments);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length) return 0;\n          var size = Math.min(contents.length - position, length);\n          assert(size >= 0);\n          if (contents.slice) {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n        stream_ops.read = function (stream, buffer, offset, length, position) {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position);\n        };\n        stream_ops.mmap = function (stream, length, position, prot, flags) {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return {\n            ptr,\n            allocated: true\n          };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },\n      absolutePath: function absolutePath() {\n        abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");\n      },\n      createFolder: function createFolder() {\n        abort("FS.createFolder has been removed; use FS.mkdir instead");\n      },\n      createLink: function createLink() {\n        abort("FS.createLink has been removed; use FS.symlink instead");\n      },\n      joinPath: function joinPath() {\n        abort("FS.joinPath has been removed; use PATH.join instead");\n      },\n      mmapAlloc: function mmapAlloc() {\n        abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");\n      },\n      standardizePath: function standardizePath() {\n        abort("FS.standardizePath has been removed; use PATH.normalize instead");\n      }\n    };\n    var SYSCALLS = {\n      DEFAULT_POLLMASK: 5,\n      calculateAt: function calculateAt(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },\n      doStat: function doStat(func, path, buf) {\n        var stat = func(path);\n        HEAP32[buf >> 2] = stat.dev;\n        HEAP32[buf + 4 >> 2] = stat.mode;\n        HEAPU32[buf + 8 >> 2] = stat.nlink;\n        HEAP32[buf + 12 >> 2] = stat.uid;\n        HEAP32[buf + 16 >> 2] = stat.gid;\n        HEAP32[buf + 20 >> 2] = stat.rdev;\n        tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 24 >> 2] = tempI64[0], HEAP32[buf + 28 >> 2] = tempI64[1];\n        HEAP32[buf + 32 >> 2] = 4096;\n        HEAP32[buf + 36 >> 2] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        tempI64 = [Math.floor(atime / 1e3) >>> 0, (tempDouble = Math.floor(atime / 1e3), +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];\n        HEAPU32[buf + 48 >> 2] = atime % 1e3 * 1e3 * 1e3;\n        tempI64 = [Math.floor(mtime / 1e3) >>> 0, (tempDouble = Math.floor(mtime / 1e3), +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 56 >> 2] = tempI64[0], HEAP32[buf + 60 >> 2] = tempI64[1];\n        HEAPU32[buf + 64 >> 2] = mtime % 1e3 * 1e3 * 1e3;\n        tempI64 = [Math.floor(ctime / 1e3) >>> 0, (tempDouble = Math.floor(ctime / 1e3), +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 72 >> 2] = tempI64[0], HEAP32[buf + 76 >> 2] = tempI64[1];\n        HEAPU32[buf + 80 >> 2] = ctime % 1e3 * 1e3 * 1e3;\n        tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 88 >> 2] = tempI64[0], HEAP32[buf + 92 >> 2] = tempI64[1];\n        return 0;\n      },\n      doMsync: function doMsync(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },\n      getStreamFromFD: function getStreamFromFD(fd) {\n        var stream = FS.getStreamChecked(fd);\n        return stream;\n      },\n      varargs: undefined,\n      getStr: function getStr(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      }\n    };\n    function ___syscall_fcntl64(fd, cmd, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (cmd) {\n          case 0:\n            {\n              var arg = syscallGetVarargI();\n              if (arg < 0) {\n                return -28;\n              }\n              while (FS.streams[arg]) {\n                arg++;\n              }\n              var newStream;\n              newStream = FS.dupStream(stream, arg);\n              return newStream.fd;\n            }\n          case 1:\n          case 2:\n            return 0;\n          case 3:\n            return stream.flags;\n          case 4:\n            {\n              var arg = syscallGetVarargI();\n              stream.flags |= arg;\n              return 0;\n            }\n          case 12:\n            {\n              var arg = syscallGetVarargP();\n              var offset = 0;\n              HEAP16[arg + offset >> 1] = 2;\n              return 0;\n            }\n          case 13:\n          case 14:\n            return 0;\n        }\n        return -28;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    function ___syscall_fstat64(fd, buf) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        return SYSCALLS.doStat(FS.stat, stream.path, buf);\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    var stringToUTF8 = function stringToUTF8(str, outPtr, maxBytesToWrite) {\n      assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    };\n    function ___syscall_getdents64(fd, dirp, count) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        stream.getdents || (stream.getdents = FS.readdir(stream.path));\n        var struct_size = 280;\n        var pos = 0;\n        var off = FS.llseek(stream, 0, 1);\n        var idx = Math.floor(off / struct_size);\n        while (idx < stream.getdents.length && pos + struct_size <= count) {\n          var id;\n          var type;\n          var name = stream.getdents[idx];\n          if (name === ".") {\n            id = stream.node.id;\n            type = 4;\n          } else if (name === "..") {\n            var lookup = FS.lookupPath(stream.path, {\n              parent: true\n            });\n            id = lookup.node.id;\n            type = 4;\n          } else {\n            var child = FS.lookupNode(stream.node, name);\n            id = child.id;\n            type = FS.isChrdev(child.mode) ? 2 : FS.isDir(child.mode) ? 4 : FS.isLink(child.mode) ? 10 : 8;\n          }\n          assert(id);\n          tempI64 = [id >>> 0, (tempDouble = id, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[dirp + pos >> 2] = tempI64[0], HEAP32[dirp + pos + 4 >> 2] = tempI64[1];\n          tempI64 = [(idx + 1) * struct_size >>> 0, (tempDouble = (idx + 1) * struct_size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[dirp + pos + 8 >> 2] = tempI64[0], HEAP32[dirp + pos + 12 >> 2] = tempI64[1];\n          HEAP16[dirp + pos + 16 >> 1] = 280;\n          HEAP8[dirp + pos + 18] = type;\n          stringToUTF8(name, dirp + pos + 19, 256);\n          pos += struct_size;\n          idx += 1;\n        }\n        FS.llseek(stream, idx * struct_size, 0);\n        return pos;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    function ___syscall_ioctl(fd, op, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (op) {\n          case 21509:\n            {\n              if (!stream.tty) return -59;\n              return 0;\n            }\n          case 21505:\n            {\n              if (!stream.tty) return -59;\n              if (stream.tty.ops.ioctl_tcgets) {\n                var termios = stream.tty.ops.ioctl_tcgets(stream);\n                var argp = syscallGetVarargP();\n                HEAP32[argp >> 2] = termios.c_iflag || 0;\n                HEAP32[argp + 4 >> 2] = termios.c_oflag || 0;\n                HEAP32[argp + 8 >> 2] = termios.c_cflag || 0;\n                HEAP32[argp + 12 >> 2] = termios.c_lflag || 0;\n                for (var i = 0; i < 32; i++) {\n                  HEAP8[argp + i + 17] = termios.c_cc[i] || 0;\n                }\n                return 0;\n              }\n              return 0;\n            }\n          case 21510:\n          case 21511:\n          case 21512:\n            {\n              if (!stream.tty) return -59;\n              return 0;\n            }\n          case 21506:\n          case 21507:\n          case 21508:\n            {\n              if (!stream.tty) return -59;\n              if (stream.tty.ops.ioctl_tcsets) {\n                var argp = syscallGetVarargP();\n                var c_iflag = HEAP32[argp >> 2];\n                var c_oflag = HEAP32[argp + 4 >> 2];\n                var c_cflag = HEAP32[argp + 8 >> 2];\n                var c_lflag = HEAP32[argp + 12 >> 2];\n                var c_cc = [];\n                for (var i = 0; i < 32; i++) {\n                  c_cc.push(HEAP8[argp + i + 17]);\n                }\n                return stream.tty.ops.ioctl_tcsets(stream.tty, op, {\n                  c_iflag,\n                  c_oflag,\n                  c_cflag,\n                  c_lflag,\n                  c_cc\n                });\n              }\n              return 0;\n            }\n          case 21519:\n            {\n              if (!stream.tty) return -59;\n              var argp = syscallGetVarargP();\n              HEAP32[argp >> 2] = 0;\n              return 0;\n            }\n          case 21520:\n            {\n              if (!stream.tty) return -59;\n              return -28;\n            }\n          case 21531:\n            {\n              var argp = syscallGetVarargP();\n              return FS.ioctl(stream, op, argp);\n            }\n          case 21523:\n            {\n              if (!stream.tty) return -59;\n              if (stream.tty.ops.ioctl_tiocgwinsz) {\n                var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);\n                var argp = syscallGetVarargP();\n                HEAP16[argp >> 1] = winsize[0];\n                HEAP16[argp + 2 >> 1] = winsize[1];\n              }\n              return 0;\n            }\n          case 21524:\n            {\n              if (!stream.tty) return -59;\n              return 0;\n            }\n          case 21515:\n            {\n              if (!stream.tty) return -59;\n              return 0;\n            }\n          default:\n            return -28;\n        }\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    function ___syscall_lstat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.lstat, path, buf);\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    function ___syscall_newfstatat(dirfd, path, buf, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        var nofollow = flags & 256;\n        var allowEmpty = flags & 4096;\n        flags = flags & ~6400;\n        assert(!flags, "unknown flags in __syscall_newfstatat: ".concat(flags));\n        path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n        return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    function ___syscall_openat(dirfd, path, flags, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        var mode = varargs ? syscallGetVarargI() : 0;\n        return FS.open(path, flags, mode).fd;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    function ___syscall_stat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    var __abort_js = function __abort_js() {\n      abort("native code called abort()");\n    };\n    var __embind_register_bigint = function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {};\n    var embind_init_charCodes = function embind_init_charCodes() {\n      var codes = new Array(256);\n      for (var i = 0; i < 256; ++i) {\n        codes[i] = String.fromCharCode(i);\n      }\n      embind_charCodes = codes;\n    };\n    var embind_charCodes;\n    var readLatin1String = function readLatin1String(ptr) {\n      var ret = "";\n      var c = ptr;\n      while (HEAPU8[c]) {\n        ret += embind_charCodes[HEAPU8[c++]];\n      }\n      return ret;\n    };\n    var awaitingDependencies = {};\n    var registeredTypes = {};\n    var typeDependencies = {};\n    var BindingError;\n    var throwBindingError = function throwBindingError(message) {\n      throw new BindingError(message);\n    };\n    var InternalError;\n    var throwInternalError = function throwInternalError(message) {\n      throw new InternalError(message);\n    };\n    var whenDependentTypesAreResolved = function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n      myTypes.forEach(function (type) {\n        return typeDependencies[type] = dependentTypes;\n      });\n      function onComplete(typeConverters) {\n        var myTypeConverters = getTypeConverters(typeConverters);\n        if (myTypeConverters.length !== myTypes.length) {\n          throwInternalError("Mismatched type converter count");\n        }\n        for (var i = 0; i < myTypes.length; ++i) {\n          registerType(myTypes[i], myTypeConverters[i]);\n        }\n      }\n      var typeConverters = new Array(dependentTypes.length);\n      var unregisteredTypes = [];\n      var registered = 0;\n      dependentTypes.forEach(function (dt, i) {\n        if (registeredTypes.hasOwnProperty(dt)) {\n          typeConverters[i] = registeredTypes[dt];\n        } else {\n          unregisteredTypes.push(dt);\n          if (!awaitingDependencies.hasOwnProperty(dt)) {\n            awaitingDependencies[dt] = [];\n          }\n          awaitingDependencies[dt].push(function () {\n            typeConverters[i] = registeredTypes[dt];\n            ++registered;\n            if (registered === unregisteredTypes.length) {\n              onComplete(typeConverters);\n            }\n          });\n        }\n      });\n      if (0 === unregisteredTypes.length) {\n        onComplete(typeConverters);\n      }\n    };\n    function sharedRegisterType(rawType, registeredInstance) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var name = registeredInstance.name;\n      if (!rawType) {\n        throwBindingError(\'type "\'.concat(name, \'" must have a positive integer typeid pointer\'));\n      }\n      if (registeredTypes.hasOwnProperty(rawType)) {\n        if (options.ignoreDuplicateRegistrations) {\n          return;\n        } else {\n          throwBindingError("Cannot register type \'".concat(name, "\' twice"));\n        }\n      }\n      registeredTypes[rawType] = registeredInstance;\n      delete typeDependencies[rawType];\n      if (awaitingDependencies.hasOwnProperty(rawType)) {\n        var callbacks = awaitingDependencies[rawType];\n        delete awaitingDependencies[rawType];\n        callbacks.forEach(function (cb) {\n          return cb();\n        });\n      }\n    }\n    function registerType(rawType, registeredInstance) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!("argPackAdvance" in registeredInstance)) {\n        throw new TypeError("registerType registeredInstance requires argPackAdvance");\n      }\n      return sharedRegisterType(rawType, registeredInstance, options);\n    }\n    var GenericWireTypeSize = 8;\n    var __embind_register_bool = function __embind_register_bool(rawType, name, trueValue, falseValue) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name,\n        fromWireType: function fromWireType(wt) {\n          return !!wt;\n        },\n        toWireType: function toWireType(destructors, o) {\n          return o ? trueValue : falseValue;\n        },\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: function readValueFromPointer(pointer) {\n          return this["fromWireType"](HEAPU8[pointer]);\n        },\n        destructorFunction: null\n      });\n    };\n    var shallowCopyInternalPointer = function shallowCopyInternalPointer(o) {\n      return {\n        count: o.count,\n        deleteScheduled: o.deleteScheduled,\n        preservePointerOnDelete: o.preservePointerOnDelete,\n        ptr: o.ptr,\n        ptrType: o.ptrType,\n        smartPtr: o.smartPtr,\n        smartPtrType: o.smartPtrType\n      };\n    };\n    var throwInstanceAlreadyDeleted = function throwInstanceAlreadyDeleted(obj) {\n      function getInstanceTypeName(handle) {\n        return handle.$$.ptrType.registeredClass.name;\n      }\n      throwBindingError(getInstanceTypeName(obj) + " instance already deleted");\n    };\n    var finalizationRegistry = false;\n    var detachFinalizer = function detachFinalizer(handle) {};\n    var runDestructor = function runDestructor($$) {\n      if ($$.smartPtr) {\n        $$.smartPtrType.rawDestructor($$.smartPtr);\n      } else {\n        $$.ptrType.registeredClass.rawDestructor($$.ptr);\n      }\n    };\n    var releaseClassHandle = function releaseClassHandle($$) {\n      $$.count.value -= 1;\n      var toDelete = 0 === $$.count.value;\n      if (toDelete) {\n        runDestructor($$);\n      }\n    };\n    var _downcastPointer = function downcastPointer(ptr, ptrClass, desiredClass) {\n      if (ptrClass === desiredClass) {\n        return ptr;\n      }\n      if (undefined === desiredClass.baseClass) {\n        return null;\n      }\n      var rv = _downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n      if (rv === null) {\n        return null;\n      }\n      return desiredClass.downcast(rv);\n    };\n    var registeredPointers = {};\n    var getInheritedInstanceCount = function getInheritedInstanceCount() {\n      return Object.keys(registeredInstances).length;\n    };\n    var getLiveInheritedInstances = function getLiveInheritedInstances() {\n      var rv = [];\n      for (var k in registeredInstances) {\n        if (registeredInstances.hasOwnProperty(k)) {\n          rv.push(registeredInstances[k]);\n        }\n      }\n      return rv;\n    };\n    var deletionQueue = [];\n    var flushPendingDeletes = function flushPendingDeletes() {\n      while (deletionQueue.length) {\n        var obj = deletionQueue.pop();\n        obj.$$.deleteScheduled = false;\n        obj["delete"]();\n      }\n    };\n    var delayFunction;\n    var setDelayFunction = function setDelayFunction(fn) {\n      delayFunction = fn;\n      if (deletionQueue.length && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n    };\n    var init_embind = function init_embind() {\n      Module["getInheritedInstanceCount"] = getInheritedInstanceCount;\n      Module["getLiveInheritedInstances"] = getLiveInheritedInstances;\n      Module["flushPendingDeletes"] = flushPendingDeletes;\n      Module["setDelayFunction"] = setDelayFunction;\n    };\n    var registeredInstances = {};\n    var getBasestPointer = function getBasestPointer(class_, ptr) {\n      if (ptr === undefined) {\n        throwBindingError("ptr should not be undefined");\n      }\n      while (class_.baseClass) {\n        ptr = class_.upcast(ptr);\n        class_ = class_.baseClass;\n      }\n      return ptr;\n    };\n    var getInheritedInstance = function getInheritedInstance(class_, ptr) {\n      ptr = getBasestPointer(class_, ptr);\n      return registeredInstances[ptr];\n    };\n    var makeClassHandle = function makeClassHandle(prototype, record) {\n      if (!record.ptrType || !record.ptr) {\n        throwInternalError("makeClassHandle requires ptr and ptrType");\n      }\n      var hasSmartPtrType = !!record.smartPtrType;\n      var hasSmartPtr = !!record.smartPtr;\n      if (hasSmartPtrType !== hasSmartPtr) {\n        throwInternalError("Both smartPtrType and smartPtr must be specified");\n      }\n      record.count = {\n        value: 1\n      };\n      return _attachFinalizer(Object.create(prototype, {\n        $$: {\n          value: record,\n          writable: true\n        }\n      }));\n    };\n    function RegisteredPointer_fromWireType(ptr) {\n      var rawPointer = this.getPointee(ptr);\n      if (!rawPointer) {\n        this.destructor(ptr);\n        return null;\n      }\n      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n      if (undefined !== registeredInstance) {\n        if (0 === registeredInstance.$$.count.value) {\n          registeredInstance.$$.ptr = rawPointer;\n          registeredInstance.$$.smartPtr = ptr;\n          return registeredInstance["clone"]();\n        } else {\n          var rv = registeredInstance["clone"]();\n          this.destructor(ptr);\n          return rv;\n        }\n      }\n      function makeDefaultHandle() {\n        if (this.isSmartPointer) {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this.pointeeType,\n            ptr: rawPointer,\n            smartPtrType: this,\n            smartPtr: ptr\n          });\n        } else {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this,\n            ptr\n          });\n        }\n      }\n      var actualType = this.registeredClass.getActualType(rawPointer);\n      var registeredPointerRecord = registeredPointers[actualType];\n      if (!registeredPointerRecord) {\n        return makeDefaultHandle.call(this);\n      }\n      var toType;\n      if (this.isConst) {\n        toType = registeredPointerRecord.constPointerType;\n      } else {\n        toType = registeredPointerRecord.pointerType;\n      }\n      var dp = _downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);\n      if (dp === null) {\n        return makeDefaultHandle.call(this);\n      }\n      if (this.isSmartPointer) {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp,\n          smartPtrType: this,\n          smartPtr: ptr\n        });\n      } else {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp\n        });\n      }\n    }\n    var _attachFinalizer = function attachFinalizer(handle) {\n      if ("undefined" === typeof FinalizationRegistry) {\n        _attachFinalizer = function attachFinalizer(handle) {\n          return handle;\n        };\n        return handle;\n      }\n      finalizationRegistry = new FinalizationRegistry(function (info) {\n        console.warn(info.leakWarning.stack.replace(/^Error: /, ""));\n        releaseClassHandle(info.$$);\n      });\n      _attachFinalizer = function attachFinalizer(handle) {\n        var $$ = handle.$$;\n        var hasSmartPtr = !!$$.smartPtr;\n        if (hasSmartPtr) {\n          var info = {\n            $$\n          };\n          var cls = $$.ptrType.registeredClass;\n          info.leakWarning = new Error("Embind found a leaked C++ instance ".concat(cls.name, " <").concat(ptrToString($$.ptr), ">.\\n") + "We\'ll free it automatically in this case, but this functionality is not reliable across various environments.\\n" + "Make sure to invoke .delete() manually once you\'re done with the instance instead.\\n" + "Originally allocated");\n          if ("captureStackTrace" in Error) {\n            Error.captureStackTrace(info.leakWarning, RegisteredPointer_fromWireType);\n          }\n          finalizationRegistry.register(handle, info, handle);\n        }\n        return handle;\n      };\n      detachFinalizer = function detachFinalizer(handle) {\n        return finalizationRegistry.unregister(handle);\n      };\n      return _attachFinalizer(handle);\n    };\n    var init_ClassHandle = function init_ClassHandle() {\n      Object.assign(ClassHandle.prototype, {\n        isAliasOf: function isAliasOf(other) {\n          if (!(this instanceof ClassHandle)) {\n            return false;\n          }\n          if (!(other instanceof ClassHandle)) {\n            return false;\n          }\n          var leftClass = this.$$.ptrType.registeredClass;\n          var left = this.$$.ptr;\n          other.$$ = other.$$;\n          var rightClass = other.$$.ptrType.registeredClass;\n          var right = other.$$.ptr;\n          while (leftClass.baseClass) {\n            left = leftClass.upcast(left);\n            leftClass = leftClass.baseClass;\n          }\n          while (rightClass.baseClass) {\n            right = rightClass.upcast(right);\n            rightClass = rightClass.baseClass;\n          }\n          return leftClass === rightClass && left === right;\n        },\n        clone: function clone() {\n          if (!this.$$.ptr) {\n            throwInstanceAlreadyDeleted(this);\n          }\n          if (this.$$.preservePointerOnDelete) {\n            this.$$.count.value += 1;\n            return this;\n          } else {\n            var clone = _attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n              $$: {\n                value: shallowCopyInternalPointer(this.$$)\n              }\n            }));\n            clone.$$.count.value += 1;\n            clone.$$.deleteScheduled = false;\n            return clone;\n          }\n        },\n        delete: function _delete() {\n          if (!this.$$.ptr) {\n            throwInstanceAlreadyDeleted(this);\n          }\n          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n            throwBindingError("Object already scheduled for deletion");\n          }\n          detachFinalizer(this);\n          releaseClassHandle(this.$$);\n          if (!this.$$.preservePointerOnDelete) {\n            this.$$.smartPtr = undefined;\n            this.$$.ptr = undefined;\n          }\n        },\n        isDeleted: function isDeleted() {\n          return !this.$$.ptr;\n        },\n        deleteLater: function deleteLater() {\n          if (!this.$$.ptr) {\n            throwInstanceAlreadyDeleted(this);\n          }\n          if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n            throwBindingError("Object already scheduled for deletion");\n          }\n          deletionQueue.push(this);\n          if (deletionQueue.length === 1 && delayFunction) {\n            delayFunction(flushPendingDeletes);\n          }\n          this.$$.deleteScheduled = true;\n          return this;\n        }\n      });\n    };\n    function ClassHandle() {}\n    var createNamedFunction = function createNamedFunction(name, body) {\n      return Object.defineProperty(body, "name", {\n        value: name\n      });\n    };\n    var ensureOverloadTable = function ensureOverloadTable(proto, methodName, humanName) {\n      if (undefined === proto[methodName].overloadTable) {\n        var prevFunc = proto[methodName];\n        proto[methodName] = function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n          if (!proto[methodName].overloadTable.hasOwnProperty(args.length)) {\n            throwBindingError("Function \'".concat(humanName, "\' called with an invalid number of arguments (").concat(args.length, ") - expects one of (").concat(proto[methodName].overloadTable, ")!"));\n          }\n          return proto[methodName].overloadTable[args.length].apply(this, args);\n        };\n        proto[methodName].overloadTable = [];\n        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n      }\n    };\n    var exposePublicSymbol = function exposePublicSymbol(name, value, numArguments) {\n      if (Module.hasOwnProperty(name)) {\n        if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {\n          throwBindingError("Cannot register public name \'".concat(name, "\' twice"));\n        }\n        ensureOverloadTable(Module, name, name);\n        if (Module.hasOwnProperty(numArguments)) {\n          throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (".concat(numArguments, ")!"));\n        }\n        Module[name].overloadTable[numArguments] = value;\n      } else {\n        Module[name] = value;\n        if (undefined !== numArguments) {\n          Module[name].numArguments = numArguments;\n        }\n      }\n    };\n    var char_0 = 48;\n    var char_9 = 57;\n    var makeLegalFunctionName = function makeLegalFunctionName(name) {\n      if (undefined === name) {\n        return "_unknown";\n      }\n      name = name.replace(/[^a-zA-Z0-9_]/g, "$");\n      var f = name.charCodeAt(0);\n      if (f >= char_0 && f <= char_9) {\n        return "_".concat(name);\n      }\n      return name;\n    };\n    function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {\n      this.name = name;\n      this.constructor = constructor;\n      this.instancePrototype = instancePrototype;\n      this.rawDestructor = rawDestructor;\n      this.baseClass = baseClass;\n      this.getActualType = getActualType;\n      this.upcast = upcast;\n      this.downcast = downcast;\n      this.pureVirtualFunctions = [];\n    }\n    var upcastPointer = function upcastPointer(ptr, ptrClass, desiredClass) {\n      while (ptrClass !== desiredClass) {\n        if (!ptrClass.upcast) {\n          throwBindingError("Expected null or instance of ".concat(desiredClass.name, ", got an instance of ").concat(ptrClass.name));\n        }\n        ptr = ptrClass.upcast(ptr);\n        ptrClass = ptrClass.baseClass;\n      }\n      return ptr;\n    };\n    function constNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError("null is not a valid ".concat(this.name));\n        }\n        return 0;\n      }\n      if (!handle.$$) {\n        throwBindingError(\'Cannot pass "\'.concat(embindRepr(handle), \'" as a \').concat(this.name));\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError("Cannot pass deleted object as a pointer of type ".concat(this.name));\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n    function genericPointerToWireType(destructors, handle) {\n      var ptr;\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError("null is not a valid ".concat(this.name));\n        }\n        if (this.isSmartPointer) {\n          ptr = this.rawConstructor();\n          if (destructors !== null) {\n            destructors.push(this.rawDestructor, ptr);\n          }\n          return ptr;\n        } else {\n          return 0;\n        }\n      }\n      if (!handle || !handle.$$) {\n        throwBindingError(\'Cannot pass "\'.concat(embindRepr(handle), \'" as a \').concat(this.name));\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError("Cannot pass deleted object as a pointer of type ".concat(this.name));\n      }\n      if (!this.isConst && handle.$$.ptrType.isConst) {\n        throwBindingError("Cannot convert argument of type ".concat(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name, " to parameter type ").concat(this.name));\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      if (this.isSmartPointer) {\n        if (undefined === handle.$$.smartPtr) {\n          throwBindingError("Passing raw pointer to smart pointer is illegal");\n        }\n        switch (this.sharingPolicy) {\n          case 0:\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              throwBindingError("Cannot convert argument of type ".concat(handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name, " to parameter type ").concat(this.name));\n            }\n            break;\n          case 1:\n            ptr = handle.$$.smartPtr;\n            break;\n          case 2:\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              var clonedHandle = handle["clone"]();\n              ptr = this.rawShare(ptr, Emval.toHandle(function () {\n                return clonedHandle["delete"]();\n              }));\n              if (destructors !== null) {\n                destructors.push(this.rawDestructor, ptr);\n              }\n            }\n            break;\n          default:\n            throwBindingError("Unsupporting sharing policy");\n        }\n      }\n      return ptr;\n    }\n    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError("null is not a valid ".concat(this.name));\n        }\n        return 0;\n      }\n      if (!handle.$$) {\n        throwBindingError(\'Cannot pass "\'.concat(embindRepr(handle), \'" as a \').concat(this.name));\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError("Cannot pass deleted object as a pointer of type ".concat(this.name));\n      }\n      if (handle.$$.ptrType.isConst) {\n        throwBindingError("Cannot convert argument of type ".concat(handle.$$.ptrType.name, " to parameter type ").concat(this.name));\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n    function readPointer(pointer) {\n      return this["fromWireType"](HEAPU32[pointer >> 2]);\n    }\n    var init_RegisteredPointer = function init_RegisteredPointer() {\n      Object.assign(RegisteredPointer.prototype, {\n        getPointee: function getPointee(ptr) {\n          if (this.rawGetPointee) {\n            ptr = this.rawGetPointee(ptr);\n          }\n          return ptr;\n        },\n        destructor: function destructor(ptr) {\n          var _this$rawDestructor;\n          (_this$rawDestructor = this.rawDestructor) === null || _this$rawDestructor === void 0 || _this$rawDestructor.call(this, ptr);\n        },\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: readPointer,\n        fromWireType: RegisteredPointer_fromWireType\n      });\n    };\n    function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {\n      this.name = name;\n      this.registeredClass = registeredClass;\n      this.isReference = isReference;\n      this.isConst = isConst;\n      this.isSmartPointer = isSmartPointer;\n      this.pointeeType = pointeeType;\n      this.sharingPolicy = sharingPolicy;\n      this.rawGetPointee = rawGetPointee;\n      this.rawConstructor = rawConstructor;\n      this.rawShare = rawShare;\n      this.rawDestructor = rawDestructor;\n      if (!isSmartPointer && registeredClass.baseClass === undefined) {\n        if (isConst) {\n          this["toWireType"] = constNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        } else {\n          this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        }\n      } else {\n        this["toWireType"] = genericPointerToWireType;\n      }\n    }\n    var replacePublicSymbol = function replacePublicSymbol(name, value, numArguments) {\n      if (!Module.hasOwnProperty(name)) {\n        throwInternalError("Replacing nonexistent public symbol");\n      }\n      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n        Module[name].overloadTable[numArguments] = value;\n      } else {\n        Module[name] = value;\n        Module[name].argCount = numArguments;\n      }\n    };\n    var dynCallLegacy = function dynCallLegacy(sig, ptr, args) {\n      sig = sig.replace(/p/g, "i");\n      assert("dynCall_" + sig in Module, "bad function pointer type - dynCall function not found for sig \'".concat(sig, "\'"));\n      if (args !== null && args !== void 0 && args.length) {\n        assert(args.length === sig.substring(1).replace(/j/g, "--").length);\n      } else {\n        assert(sig.length == 1);\n      }\n      var f = Module["dynCall_" + sig];\n      return f.apply(void 0, [ptr].concat(_toConsumableArray(args)));\n    };\n    var wasmTableMirror = [];\n    var wasmTable;\n    var getWasmTableEntry = function getWasmTableEntry(funcPtr) {\n      var func = wasmTableMirror[funcPtr];\n      if (!func) {\n        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);\n      }\n      assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");\n      return func;\n    };\n    var dynCall = function dynCall(sig, ptr) {\n      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      if (sig.includes("j")) {\n        return dynCallLegacy(sig, ptr, args);\n      }\n      assert(getWasmTableEntry(ptr), "missing table entry in dynCall: ".concat(ptr));\n      var rtn = getWasmTableEntry(ptr).apply(void 0, _toConsumableArray(args));\n      return rtn;\n    };\n    var getDynCaller = function getDynCaller(sig, ptr) {\n      assert(sig.includes("j") || sig.includes("p"), "getDynCaller should only be called with i64 sigs");\n      return function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        return dynCall(sig, ptr, args);\n      };\n    };\n    var embind__requireFunction = function embind__requireFunction(signature, rawFunction) {\n      signature = readLatin1String(signature);\n      function makeDynCaller() {\n        if (signature.includes("j")) {\n          return getDynCaller(signature, rawFunction);\n        }\n        return getWasmTableEntry(rawFunction);\n      }\n      var fp = makeDynCaller();\n      if (typeof fp != "function") {\n        throwBindingError("unknown function pointer with signature ".concat(signature, ": ").concat(rawFunction));\n      }\n      return fp;\n    };\n    var extendError = function extendError(baseErrorType, errorName) {\n      var errorClass = createNamedFunction(errorName, function (message) {\n        this.name = errorName;\n        this.message = message;\n        var stack = new Error(message).stack;\n        if (stack !== undefined) {\n          this.stack = this.toString() + "\\n" + stack.replace(/^Error(:[^\\n]*)?\\n/, "");\n        }\n      });\n      errorClass.prototype = Object.create(baseErrorType.prototype);\n      errorClass.prototype.constructor = errorClass;\n      errorClass.prototype.toString = function () {\n        if (this.message === undefined) {\n          return this.name;\n        } else {\n          return "".concat(this.name, ": ").concat(this.message);\n        }\n      };\n      return errorClass;\n    };\n    var UnboundTypeError;\n    var getTypeName = function getTypeName(type) {\n      var ptr = ___getTypeName(type);\n      var rv = readLatin1String(ptr);\n      _free(ptr);\n      return rv;\n    };\n    var throwUnboundTypeError = function throwUnboundTypeError(message, types) {\n      var unboundTypes = [];\n      var seen = {};\n      function visit(type) {\n        if (seen[type]) {\n          return;\n        }\n        if (registeredTypes[type]) {\n          return;\n        }\n        if (typeDependencies[type]) {\n          typeDependencies[type].forEach(visit);\n          return;\n        }\n        unboundTypes.push(type);\n        seen[type] = true;\n      }\n      types.forEach(visit);\n      throw new UnboundTypeError("".concat(message, ": ") + unboundTypes.map(getTypeName).join([", "]));\n    };\n    var __embind_register_class = function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {\n      name = readLatin1String(name);\n      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n      upcast && (upcast = embind__requireFunction(upcastSignature, upcast));\n      downcast && (downcast = embind__requireFunction(downcastSignature, downcast));\n      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n      var legalFunctionName = makeLegalFunctionName(name);\n      exposePublicSymbol(legalFunctionName, function () {\n        throwUnboundTypeError("Cannot construct ".concat(name, " due to unbound types"), [baseClassRawType]);\n      });\n      whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {\n        base = base[0];\n        var baseClass;\n        var basePrototype;\n        if (baseClassRawType) {\n          baseClass = base.registeredClass;\n          basePrototype = baseClass.instancePrototype;\n        } else {\n          basePrototype = ClassHandle.prototype;\n        }\n        var constructor = createNamedFunction(name, function () {\n          if (Object.getPrototypeOf(this) !== instancePrototype) {\n            throw new BindingError("Use \'new\' to construct " + name);\n          }\n          if (undefined === registeredClass.constructor_body) {\n            throw new BindingError(name + " has no accessible constructor");\n          }\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n          var body = registeredClass.constructor_body[args.length];\n          if (undefined === body) {\n            throw new BindingError("Tried to invoke ctor of ".concat(name, " with invalid number of parameters (").concat(args.length, ") - expected (").concat(Object.keys(registeredClass.constructor_body).toString(), ") parameters instead!"));\n          }\n          return body.apply(this, args);\n        });\n        var instancePrototype = Object.create(basePrototype, {\n          constructor: {\n            value: constructor\n          }\n        });\n        constructor.prototype = instancePrototype;\n        var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);\n        if (registeredClass.baseClass) {\n          var _registeredClass$base, _registeredClass$base2;\n          (_registeredClass$base2 = (_registeredClass$base = registeredClass.baseClass).__derivedClasses) !== null && _registeredClass$base2 !== void 0 ? _registeredClass$base2 : _registeredClass$base.__derivedClasses = [];\n          registeredClass.baseClass.__derivedClasses.push(registeredClass);\n        }\n        var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);\n        var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);\n        var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);\n        registeredPointers[rawType] = {\n          pointerType: pointerConverter,\n          constPointerType: constPointerConverter\n        };\n        replacePublicSymbol(legalFunctionName, constructor);\n        return [referenceConverter, pointerConverter, constPointerConverter];\n      });\n    };\n    var runDestructors = function runDestructors(destructors) {\n      while (destructors.length) {\n        var ptr = destructors.pop();\n        var del = destructors.pop();\n        del(ptr);\n      }\n    };\n    function usesDestructorStack(argTypes) {\n      for (var i = 1; i < argTypes.length; ++i) {\n        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {\n          return true;\n        }\n      }\n      return false;\n    }\n    function newFunc(constructor, argumentList) {\n      if (!(constructor instanceof Function)) {\n        throw new TypeError("new_ called with constructor type ".concat(_typeof(constructor), " which is not a function"));\n      }\n      var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function () {});\n      dummy.prototype = constructor.prototype;\n      var obj = new dummy();\n      var r = constructor.apply(obj, argumentList);\n      return r instanceof Object ? r : obj;\n    }\n    function createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync) {\n      var needsDestructorStack = usesDestructorStack(argTypes);\n      var argCount = argTypes.length - 2;\n      var argsList = [];\n      var argsListWired = ["fn"];\n      if (isClassMethodFunc) {\n        argsListWired.push("thisWired");\n      }\n      for (var i = 0; i < argCount; ++i) {\n        argsList.push("arg".concat(i));\n        argsListWired.push("arg".concat(i, "Wired"));\n      }\n      argsList = argsList.join(",");\n      argsListWired = argsListWired.join(",");\n      var invokerFnBody = "\\n        return function (".concat(argsList, ") {\\n        if (arguments.length !== ").concat(argCount, ") {\\n          throwBindingError(\'function \' + humanName + \' called with \' + arguments.length + \' arguments, expected ").concat(argCount, "\');\\n        }");\n      if (needsDestructorStack) {\n        invokerFnBody += "var destructors = [];\\n";\n      }\n      var dtorStack = needsDestructorStack ? "destructors" : "null";\n      var args1 = ["humanName", "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];\n      if (isClassMethodFunc) {\n        invokerFnBody += "var thisWired = classParam[\'toWireType\'](".concat(dtorStack, ", this);\\n");\n      }\n      for (var i = 0; i < argCount; ++i) {\n        invokerFnBody += "var arg".concat(i, "Wired = argType").concat(i, "[\'toWireType\'](").concat(dtorStack, ", arg").concat(i, ");\\n");\n        args1.push("argType".concat(i));\n      }\n      invokerFnBody += (returns || isAsync ? "var rv = " : "") + "invoker(".concat(argsListWired, ");\\n");\n      if (needsDestructorStack) {\n        invokerFnBody += "runDestructors(destructors);\\n";\n      } else {\n        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {\n          var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";\n          if (argTypes[i].destructorFunction !== null) {\n            invokerFnBody += "".concat(paramName, "_dtor(").concat(paramName, ");\\n");\n            args1.push("".concat(paramName, "_dtor"));\n          }\n        }\n      }\n      if (returns) {\n        invokerFnBody += "var ret = retType[\'fromWireType\'](rv);\\n" + "return ret;\\n";\n      } else {}\n      invokerFnBody += "}\\n";\n      invokerFnBody = "if (arguments.length !== ".concat(args1.length, \'){ throw new Error(humanName + "Expected \').concat(args1.length, \' closure arguments " + arguments.length + " given."); }\\n\').concat(invokerFnBody);\n      return [args1, invokerFnBody];\n    }\n    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, isAsync) {\n      var argCount = argTypes.length;\n      if (argCount < 2) {\n        throwBindingError("argTypes array size mismatch! Must at least get return value and \'this\' types!");\n      }\n      assert(!isAsync, "Async bindings are only supported with JSPI.");\n      var isClassMethodFunc = argTypes[1] !== null && classType !== null;\n      var needsDestructorStack = usesDestructorStack(argTypes);\n      var returns = argTypes[0].name !== "void";\n      var closureArgs = [humanName, throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];\n      for (var i = 0; i < argCount - 2; ++i) {\n        closureArgs.push(argTypes[i + 2]);\n      }\n      if (!needsDestructorStack) {\n        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {\n          if (argTypes[i].destructorFunction !== null) {\n            closureArgs.push(argTypes[i].destructorFunction);\n          }\n        }\n      }\n      var _createJsInvoker = createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync),\n        _createJsInvoker2 = _slicedToArray(_createJsInvoker, 2),\n        args = _createJsInvoker2[0],\n        invokerFnBody = _createJsInvoker2[1];\n      args.push(invokerFnBody);\n      var invokerFn = newFunc(Function, args).apply(void 0, closureArgs);\n      return createNamedFunction(humanName, invokerFn);\n    }\n    var heap32VectorToArray = function heap32VectorToArray(count, firstElement) {\n      var array = [];\n      for (var i = 0; i < count; i++) {\n        array.push(HEAPU32[firstElement + i * 4 >> 2]);\n      }\n      return array;\n    };\n    var getFunctionName = function getFunctionName(signature) {\n      signature = signature.trim();\n      var argsIndex = signature.indexOf("(");\n      if (argsIndex !== -1) {\n        assert(signature[signature.length - 1] == ")", "Parentheses for argument names should match.");\n        return signature.substr(0, argsIndex);\n      } else {\n        return signature;\n      }\n    };\n    var __embind_register_class_class_function = function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn, isAsync, isNonnullReturn) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      methodName = getFunctionName(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n      whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n        classType = classType[0];\n        var humanName = "".concat(classType.name, ".").concat(methodName);\n        function unboundTypesHandler() {\n          throwUnboundTypeError("Cannot call ".concat(humanName, " due to unbound types"), rawArgTypes);\n        }\n        if (methodName.startsWith("@@")) {\n          methodName = Symbol[methodName.substring(2)];\n        }\n        var proto = classType.registeredClass.constructor;\n        if (undefined === proto[methodName]) {\n          unboundTypesHandler.argCount = argCount - 1;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;\n        }\n        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n          var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));\n          var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn, isAsync);\n          if (undefined === proto[methodName].overloadTable) {\n            func.argCount = argCount - 1;\n            proto[methodName] = func;\n          } else {\n            proto[methodName].overloadTable[argCount - 1] = func;\n          }\n          if (classType.registeredClass.__derivedClasses) {\n            var _iterator = _createForOfIteratorHelper(classType.registeredClass.__derivedClasses),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var derivedClass = _step.value;\n                if (!derivedClass.constructor.hasOwnProperty(methodName)) {\n                  derivedClass.constructor[methodName] = func;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n          return [];\n        });\n        return [];\n      });\n    };\n    var __embind_register_class_function = function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual, isAsync, isNonnullReturn) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      methodName = getFunctionName(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n      whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n        classType = classType[0];\n        var humanName = "".concat(classType.name, ".").concat(methodName);\n        if (methodName.startsWith("@@")) {\n          methodName = Symbol[methodName.substring(2)];\n        }\n        if (isPureVirtual) {\n          classType.registeredClass.pureVirtualFunctions.push(methodName);\n        }\n        function unboundTypesHandler() {\n          throwUnboundTypeError("Cannot call ".concat(humanName, " due to unbound types"), rawArgTypes);\n        }\n        var proto = classType.registeredClass.instancePrototype;\n        var method = proto[methodName];\n        if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {\n          unboundTypesHandler.argCount = argCount - 2;\n          unboundTypesHandler.className = classType.name;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n        }\n        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);\n          if (undefined === proto[methodName].overloadTable) {\n            memberFunction.argCount = argCount - 2;\n            proto[methodName] = memberFunction;\n          } else {\n            proto[methodName].overloadTable[argCount - 2] = memberFunction;\n          }\n          return [];\n        });\n        return [];\n      });\n    };\n    var emval_freelist = [];\n    var emval_handles = [];\n    var __emval_decref = function __emval_decref(handle) {\n      if (handle > 9 && 0 === --emval_handles[handle + 1]) {\n        assert(emval_handles[handle] !== undefined, "Decref for unallocated handle.");\n        emval_handles[handle] = undefined;\n        emval_freelist.push(handle);\n      }\n    };\n    var count_emval_handles = function count_emval_handles() {\n      return emval_handles.length / 2 - 5 - emval_freelist.length;\n    };\n    var init_emval = function init_emval() {\n      emval_handles.push(0, 1, undefined, 1, null, 1, true, 1, false, 1);\n      assert(emval_handles.length === 5 * 2);\n      Module["count_emval_handles"] = count_emval_handles;\n    };\n    var Emval = {\n      toValue: function toValue(handle) {\n        if (!handle) {\n          throwBindingError("Cannot use deleted val. handle = " + handle);\n        }\n        assert(handle === 2 || emval_handles[handle] !== undefined && handle % 2 === 0, "invalid handle: ".concat(handle));\n        return emval_handles[handle];\n      },\n      toHandle: function toHandle(value) {\n        switch (value) {\n          case undefined:\n            return 2;\n          case null:\n            return 4;\n          case true:\n            return 6;\n          case false:\n            return 8;\n          default:\n            {\n              var handle = emval_freelist.pop() || emval_handles.length;\n              emval_handles[handle] = value;\n              emval_handles[handle + 1] = 1;\n              return handle;\n            }\n        }\n      }\n    };\n    var EmValType = {\n      name: "emscripten::val",\n      fromWireType: function fromWireType(handle) {\n        var rv = Emval.toValue(handle);\n        __emval_decref(handle);\n        return rv;\n      },\n      toWireType: function toWireType(destructors, value) {\n        return Emval.toHandle(value);\n      },\n      argPackAdvance: GenericWireTypeSize,\n      readValueFromPointer: readPointer,\n      destructorFunction: null\n    };\n    var __embind_register_emval = function __embind_register_emval(rawType) {\n      return registerType(rawType, EmValType);\n    };\n    var embindRepr = function embindRepr(v) {\n      if (v === null) {\n        return "null";\n      }\n      var t = _typeof(v);\n      if (t === "object" || t === "array" || t === "function") {\n        return v.toString();\n      } else {\n        return "" + v;\n      }\n    };\n    var floatReadValueFromPointer = function floatReadValueFromPointer(name, width) {\n      switch (width) {\n        case 4:\n          return function (pointer) {\n            return this["fromWireType"](HEAPF32[pointer >> 2]);\n          };\n        case 8:\n          return function (pointer) {\n            return this["fromWireType"](HEAPF64[pointer >> 3]);\n          };\n        default:\n          throw new TypeError("invalid float width (".concat(width, "): ").concat(name));\n      }\n    };\n    var __embind_register_float = function __embind_register_float(rawType, name, size) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name,\n        fromWireType: function fromWireType(value) {\n          return value;\n        },\n        toWireType: function toWireType(destructors, value) {\n          if (typeof value != "number" && typeof value != "boolean") {\n            throw new TypeError("Cannot convert ".concat(embindRepr(value), " to ").concat(_this2.name));\n          }\n          return value;\n        },\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: floatReadValueFromPointer(name, size),\n        destructorFunction: null\n      });\n    };\n    var integerReadValueFromPointer = function integerReadValueFromPointer(name, width, signed) {\n      switch (width) {\n        case 1:\n          return signed ? function (pointer) {\n            return HEAP8[pointer];\n          } : function (pointer) {\n            return HEAPU8[pointer];\n          };\n        case 2:\n          return signed ? function (pointer) {\n            return HEAP16[pointer >> 1];\n          } : function (pointer) {\n            return HEAPU16[pointer >> 1];\n          };\n        case 4:\n          return signed ? function (pointer) {\n            return HEAP32[pointer >> 2];\n          } : function (pointer) {\n            return HEAPU32[pointer >> 2];\n          };\n        default:\n          throw new TypeError("invalid integer width (".concat(width, "): ").concat(name));\n      }\n    };\n    var __embind_register_integer = function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n      name = readLatin1String(name);\n      if (maxRange === -1) {\n        maxRange = 4294967295;\n      }\n      var fromWireType = function fromWireType(value) {\n        return value;\n      };\n      if (minRange === 0) {\n        var bitshift = 32 - 8 * size;\n        fromWireType = function fromWireType(value) {\n          return value << bitshift >>> bitshift;\n        };\n      }\n      var isUnsignedType = name.includes("unsigned");\n      var checkAssertions = function checkAssertions(value, toTypeName) {\n        if (typeof value != "number" && typeof value != "boolean") {\n          throw new TypeError(\'Cannot convert "\'.concat(embindRepr(value), \'" to \').concat(toTypeName));\n        }\n        if (value < minRange || value > maxRange) {\n          throw new TypeError(\'Passing a number "\'.concat(embindRepr(value), \'" from JS side to C/C++ side to an argument of type "\').concat(name, \'", which is outside the valid range [\').concat(minRange, ", ").concat(maxRange, "]!"));\n        }\n      };\n      var toWireType;\n      if (isUnsignedType) {\n        toWireType = function toWireType(destructors, value) {\n          checkAssertions(value, this.name);\n          return value >>> 0;\n        };\n      } else {\n        toWireType = function toWireType(destructors, value) {\n          checkAssertions(value, this.name);\n          return value;\n        };\n      }\n      registerType(primitiveType, {\n        name,\n        fromWireType,\n        toWireType,\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: integerReadValueFromPointer(name, size, minRange !== 0),\n        destructorFunction: null\n      });\n    };\n    var __embind_register_memory_view = function __embind_register_memory_view(rawType, dataTypeIndex, name) {\n      var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];\n      var TA = typeMapping[dataTypeIndex];\n      function decodeMemoryView(handle) {\n        var size = HEAPU32[handle >> 2];\n        var data = HEAPU32[handle + 4 >> 2];\n        return new TA(HEAP8.buffer, data, size);\n      }\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name,\n        fromWireType: decodeMemoryView,\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: decodeMemoryView\n      }, {\n        ignoreDuplicateRegistrations: true\n      });\n    };\n    var __embind_register_std_string = function __embind_register_std_string(rawType, name) {\n      name = readLatin1String(name);\n      var stdStringIsUTF8 = name === "std::string";\n      registerType(rawType, {\n        name,\n        fromWireType: function fromWireType(value) {\n          var length = HEAPU32[value >> 2];\n          var payload = value + 4;\n          var str;\n          if (stdStringIsUTF8) {\n            var decodeStartPtr = payload;\n            for (var i = 0; i <= length; ++i) {\n              var currentBytePtr = payload + i;\n              if (i == length || HEAPU8[currentBytePtr] == 0) {\n                var maxRead = currentBytePtr - decodeStartPtr;\n                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n                if (str === undefined) {\n                  str = stringSegment;\n                } else {\n                  str += String.fromCharCode(0);\n                  str += stringSegment;\n                }\n                decodeStartPtr = currentBytePtr + 1;\n              }\n            }\n          } else {\n            var a = new Array(length);\n            for (var i = 0; i < length; ++i) {\n              a[i] = String.fromCharCode(HEAPU8[payload + i]);\n            }\n            str = a.join("");\n          }\n          _free(value);\n          return str;\n        },\n        toWireType: function toWireType(destructors, value) {\n          if (value instanceof ArrayBuffer) {\n            value = new Uint8Array(value);\n          }\n          var length;\n          var valueIsOfTypeString = typeof value == "string";\n          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n            throwBindingError("Cannot pass non-string to std::string");\n          }\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            length = lengthBytesUTF8(value);\n          } else {\n            length = value.length;\n          }\n          var base = _malloc(4 + length + 1);\n          var ptr = base + 4;\n          HEAPU32[base >> 2] = length;\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            stringToUTF8(value, ptr, length + 1);\n          } else {\n            if (valueIsOfTypeString) {\n              for (var i = 0; i < length; ++i) {\n                var charCode = value.charCodeAt(i);\n                if (charCode > 255) {\n                  _free(ptr);\n                  throwBindingError("String has UTF-16 code units that do not fit in 8 bits");\n                }\n                HEAPU8[ptr + i] = charCode;\n              }\n            } else {\n              for (var i = 0; i < length; ++i) {\n                HEAPU8[ptr + i] = value[i];\n              }\n            }\n          }\n          if (destructors !== null) {\n            destructors.push(_free, base);\n          }\n          return base;\n        },\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: readPointer,\n        destructorFunction: function destructorFunction(ptr) {\n          _free(ptr);\n        }\n      });\n    };\n    var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : undefined;\n    var UTF16ToString = function UTF16ToString(ptr, maxBytesToRead) {\n      assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");\n      var endPtr = ptr;\n      var idx = endPtr >> 1;\n      var maxIdx = idx + maxBytesToRead / 2;\n      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n      endPtr = idx << 1;\n      if (endPtr - ptr > 32 && UTF16Decoder) return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n      var str = "";\n      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n        var codeUnit = HEAP16[ptr + i * 2 >> 1];\n        if (codeUnit == 0) break;\n        str += String.fromCharCode(codeUnit);\n      }\n      return str;\n    };\n    var stringToUTF16 = function stringToUTF16(str, outPtr, maxBytesToWrite) {\n      var _maxBytesToWrite;\n      assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");\n      assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");\n      (_maxBytesToWrite = maxBytesToWrite) !== null && _maxBytesToWrite !== void 0 ? _maxBytesToWrite : maxBytesToWrite = 2147483647;\n      if (maxBytesToWrite < 2) return 0;\n      maxBytesToWrite -= 2;\n      var startPtr = outPtr;\n      var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n      for (var i = 0; i < numCharsToWrite; ++i) {\n        var codeUnit = str.charCodeAt(i);\n        HEAP16[outPtr >> 1] = codeUnit;\n        outPtr += 2;\n      }\n      HEAP16[outPtr >> 1] = 0;\n      return outPtr - startPtr;\n    };\n    var lengthBytesUTF16 = function lengthBytesUTF16(str) {\n      return str.length * 2;\n    };\n    var UTF32ToString = function UTF32ToString(ptr, maxBytesToRead) {\n      assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");\n      var i = 0;\n      var str = "";\n      while (!(i >= maxBytesToRead / 4)) {\n        var utf32 = HEAP32[ptr + i * 4 >> 2];\n        if (utf32 == 0) break;\n        ++i;\n        if (utf32 >= 65536) {\n          var ch = utf32 - 65536;\n          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n        } else {\n          str += String.fromCharCode(utf32);\n        }\n      }\n      return str;\n    };\n    var stringToUTF32 = function stringToUTF32(str, outPtr, maxBytesToWrite) {\n      var _maxBytesToWrite2;\n      assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");\n      assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");\n      (_maxBytesToWrite2 = maxBytesToWrite) !== null && _maxBytesToWrite2 !== void 0 ? _maxBytesToWrite2 : maxBytesToWrite = 2147483647;\n      if (maxBytesToWrite < 4) return 0;\n      var startPtr = outPtr;\n      var endPtr = startPtr + maxBytesToWrite - 4;\n      for (var i = 0; i < str.length; ++i) {\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 55296 && codeUnit <= 57343) {\n          var trailSurrogate = str.charCodeAt(++i);\n          codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;\n        }\n        HEAP32[outPtr >> 2] = codeUnit;\n        outPtr += 4;\n        if (outPtr + 4 > endPtr) break;\n      }\n      HEAP32[outPtr >> 2] = 0;\n      return outPtr - startPtr;\n    };\n    var lengthBytesUTF32 = function lengthBytesUTF32(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n        len += 4;\n      }\n      return len;\n    };\n    var __embind_register_std_wstring = function __embind_register_std_wstring(rawType, charSize, name) {\n      name = readLatin1String(name);\n      var decodeString, encodeString, readCharAt, lengthBytesUTF;\n      if (charSize === 2) {\n        decodeString = UTF16ToString;\n        encodeString = stringToUTF16;\n        lengthBytesUTF = lengthBytesUTF16;\n        readCharAt = function readCharAt(pointer) {\n          return HEAPU16[pointer >> 1];\n        };\n      } else if (charSize === 4) {\n        decodeString = UTF32ToString;\n        encodeString = stringToUTF32;\n        lengthBytesUTF = lengthBytesUTF32;\n        readCharAt = function readCharAt(pointer) {\n          return HEAPU32[pointer >> 2];\n        };\n      }\n      registerType(rawType, {\n        name,\n        fromWireType: function fromWireType(value) {\n          var length = HEAPU32[value >> 2];\n          var str;\n          var decodeStartPtr = value + 4;\n          for (var i = 0; i <= length; ++i) {\n            var currentBytePtr = value + 4 + i * charSize;\n            if (i == length || readCharAt(currentBytePtr) == 0) {\n              var maxReadBytes = currentBytePtr - decodeStartPtr;\n              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n              if (str === undefined) {\n                str = stringSegment;\n              } else {\n                str += String.fromCharCode(0);\n                str += stringSegment;\n              }\n              decodeStartPtr = currentBytePtr + charSize;\n            }\n          }\n          _free(value);\n          return str;\n        },\n        toWireType: function toWireType(destructors, value) {\n          if (!(typeof value == "string")) {\n            throwBindingError("Cannot pass non-string to C++ string type ".concat(name));\n          }\n          var length = lengthBytesUTF(value);\n          var ptr = _malloc(4 + length + charSize);\n          HEAPU32[ptr >> 2] = length / charSize;\n          encodeString(value, ptr + 4, length + charSize);\n          if (destructors !== null) {\n            destructors.push(_free, ptr);\n          }\n          return ptr;\n        },\n        argPackAdvance: GenericWireTypeSize,\n        readValueFromPointer: readPointer,\n        destructorFunction: function destructorFunction(ptr) {\n          _free(ptr);\n        }\n      });\n    };\n    var __embind_register_void = function __embind_register_void(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        isVoid: true,\n        name,\n        argPackAdvance: 0,\n        fromWireType: function fromWireType() {\n          return undefined;\n        },\n        toWireType: function toWireType(destructors, o) {\n          return undefined;\n        }\n      });\n    };\n    var nowIsMonotonic = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) == "object" && performance && typeof performance["now"] == "function";\n    var __emscripten_get_now_is_monotonic = function __emscripten_get_now_is_monotonic() {\n      return nowIsMonotonic;\n    };\n    var __emscripten_memcpy_js = Uint8Array.prototype.copyWithin ? function (dest, src, num) {\n      return HEAPU8.copyWithin(dest, src, src + num);\n    } : function (dest, src, num) {\n      return HEAPU8.set(HEAPU8.subarray(src, src + num), dest);\n    };\n    var convertI32PairToI53Checked = function convertI32PairToI53Checked(lo, hi) {\n      assert(lo == lo >>> 0 || lo == (lo | 0));\n      assert(hi === (hi | 0));\n      return hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN;\n    };\n    function __munmap_js(addr, len, prot, flags, fd, offset_low, offset_high) {\n      var offset = convertI32PairToI53Checked(offset_low, offset_high);\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (prot & 2) {\n          SYSCALLS.doMsync(addr, stream, len, flags, offset);\n        }\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return -e.errno;\n      }\n    }\n    var _emscripten_date_now = function _emscripten_date_now() {\n      return Date.now();\n    };\n    var _emscripten_get_now;\n    if (typeof performance != "undefined" && performance.now) {\n      _emscripten_get_now = function _emscripten_get_now() {\n        return performance.now();\n      };\n    } else {\n      _emscripten_get_now = Date.now;\n    }\n    var abortOnCannotGrowMemory = function abortOnCannotGrowMemory(requestedSize) {\n      abort("Cannot enlarge memory arrays to size ".concat(requestedSize, " bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ").concat(HEAP8.length, ", (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0"));\n    };\n    var _emscripten_resize_heap = function _emscripten_resize_heap(requestedSize) {\n      var oldSize = HEAPU8.length;\n      requestedSize >>>= 0;\n      abortOnCannotGrowMemory(requestedSize);\n    };\n    var ENV = {};\n    var getExecutableName = function getExecutableName() {\n      return thisProgram || "./this.program";\n    };\n    var _getEnvStrings = function getEnvStrings() {\n      if (!_getEnvStrings.strings) {\n        var lang = ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";\n        var env = {\n          USER: "web_user",\n          LOGNAME: "web_user",\n          PATH: "/",\n          PWD: "/",\n          HOME: "/home/web_user",\n          LANG: lang,\n          _: getExecutableName()\n        };\n        for (var x in ENV) {\n          if (ENV[x] === undefined) delete env[x];else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push("".concat(x, "=").concat(env[x]));\n        }\n        _getEnvStrings.strings = strings;\n      }\n      return _getEnvStrings.strings;\n    };\n    var stringToAscii = function stringToAscii(str, buffer) {\n      for (var i = 0; i < str.length; ++i) {\n        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));\n        HEAP8[buffer++] = str.charCodeAt(i);\n      }\n      HEAP8[buffer] = 0;\n    };\n    var _environ_get = function _environ_get(__environ, environ_buf) {\n      var bufSize = 0;\n      _getEnvStrings().forEach(function (string, i) {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[__environ + i * 4 >> 2] = ptr;\n        stringToAscii(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    };\n    var _environ_sizes_get = function _environ_sizes_get(penviron_count, penviron_buf_size) {\n      var strings = _getEnvStrings();\n      HEAPU32[penviron_count >> 2] = strings.length;\n      var bufSize = 0;\n      strings.forEach(function (string) {\n        return bufSize += string.length + 1;\n      });\n      HEAPU32[penviron_buf_size >> 2] = bufSize;\n      return 0;\n    };\n    function _fd_close(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.close(stream);\n        return 0;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return e.errno;\n      }\n    }\n    var doReadv = function doReadv(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[iov + 4 >> 2];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break;\n        if (typeof offset != "undefined") {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n    function _fd_read(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doReadv(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return e.errno;\n      }\n    }\n    function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n      var offset = convertI32PairToI53Checked(offset_low, offset_high);\n      try {\n        if (isNaN(offset)) return 61;\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.llseek(stream, offset, whence);\n        tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];\n        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;\n        return 0;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return e.errno;\n      }\n    }\n    var doWritev = function doWritev(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[iov + 4 >> 2];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) {\n          break;\n        }\n        if (typeof offset != "undefined") {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n    function _fd_write(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doWritev(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;\n        return e.errno;\n      }\n    }\n    FS.createPreloadedFile = FS_createPreloadedFile;\n    FS.staticInit();\n    embind_init_charCodes();\n    BindingError = Module["BindingError"] = function (_Error2) {\n      "use strict";\n\n      function BindingError(message) {\n        var _this3;\n        _classCallCheck(this, BindingError);\n        _this3 = _callSuper(this, BindingError, [message]);\n        _this3.name = "BindingError";\n        return _this3;\n      }\n      _inherits(BindingError, _Error2);\n      return _createClass(BindingError);\n    }(_wrapNativeSuper(Error));\n    InternalError = Module["InternalError"] = function (_Error3) {\n      "use strict";\n\n      function InternalError(message) {\n        var _this4;\n        _classCallCheck(this, InternalError);\n        _this4 = _callSuper(this, InternalError, [message]);\n        _this4.name = "InternalError";\n        return _this4;\n      }\n      _inherits(InternalError, _Error3);\n      return _createClass(InternalError);\n    }(_wrapNativeSuper(Error));\n    init_ClassHandle();\n    init_embind();\n    if (!Object.getOwnPropertyDescriptor(Function.prototype, "name").configurable) {\n      createNamedFunction = function createNamedFunction(name, body) {\n        return body;\n      };\n    }\n    init_RegisteredPointer();\n    UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");\n    init_emval();\n    function checkIncomingModuleAPI() {\n      ignoredModuleProp("fetchSettings");\n    }\n    var wasmImports = {\n      __assert_fail: ___assert_fail,\n      __cxa_throw: ___cxa_throw,\n      __syscall_fcntl64: ___syscall_fcntl64,\n      __syscall_fstat64: ___syscall_fstat64,\n      __syscall_getdents64: ___syscall_getdents64,\n      __syscall_ioctl: ___syscall_ioctl,\n      __syscall_lstat64: ___syscall_lstat64,\n      __syscall_newfstatat: ___syscall_newfstatat,\n      __syscall_openat: ___syscall_openat,\n      __syscall_stat64: ___syscall_stat64,\n      _abort_js: __abort_js,\n      _embind_register_bigint: __embind_register_bigint,\n      _embind_register_bool: __embind_register_bool,\n      _embind_register_class: __embind_register_class,\n      _embind_register_class_class_function: __embind_register_class_class_function,\n      _embind_register_class_function: __embind_register_class_function,\n      _embind_register_emval: __embind_register_emval,\n      _embind_register_float: __embind_register_float,\n      _embind_register_integer: __embind_register_integer,\n      _embind_register_memory_view: __embind_register_memory_view,\n      _embind_register_std_string: __embind_register_std_string,\n      _embind_register_std_wstring: __embind_register_std_wstring,\n      _embind_register_void: __embind_register_void,\n      _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n      _emscripten_memcpy_js: __emscripten_memcpy_js,\n      _munmap_js: __munmap_js,\n      emscripten_date_now: _emscripten_date_now,\n      emscripten_get_now: _emscripten_get_now,\n      emscripten_resize_heap: _emscripten_resize_heap,\n      environ_get: _environ_get,\n      environ_sizes_get: _environ_sizes_get,\n      fd_close: _fd_close,\n      fd_read: _fd_read,\n      fd_seek: _fd_seek,\n      fd_write: _fd_write\n    };\n    var wasmExports = createWasm();\n    var ___wasm_call_ctors = createExportWrapper("__wasm_call_ctors", 0);\n    var _malloc = Module["_malloc"] = createExportWrapper("malloc", 1);\n    var _ntohs = createExportWrapper("ntohs", 1);\n    var _fflush = createExportWrapper("fflush", 1);\n    var _free = Module["_free"] = createExportWrapper("free", 1);\n    var ___getTypeName = createExportWrapper("__getTypeName", 1);\n    var _htonl = createExportWrapper("htonl", 1);\n    var _htons = createExportWrapper("htons", 1);\n    var _emscripten_builtin_memalign = createExportWrapper("emscripten_builtin_memalign", 2);\n    var _strerror = createExportWrapper("strerror", 1);\n    var __emscripten_tempret_set = createExportWrapper("_emscripten_tempret_set", 1);\n    var _emscripten_stack_init2 = function _emscripten_stack_init() {\n      return (_emscripten_stack_init2 = wasmExports["emscripten_stack_init"])();\n    };\n    var _emscripten_stack_get_free2 = function _emscripten_stack_get_free() {\n      return (_emscripten_stack_get_free2 = wasmExports["emscripten_stack_get_free"])();\n    };\n    var _emscripten_stack_get_base2 = function _emscripten_stack_get_base() {\n      return (_emscripten_stack_get_base2 = wasmExports["emscripten_stack_get_base"])();\n    };\n    var _emscripten_stack_get_end2 = function _emscripten_stack_get_end() {\n      return (_emscripten_stack_get_end2 = wasmExports["emscripten_stack_get_end"])();\n    };\n    var _emscripten_stack_restore = function __emscripten_stack_restore(a0) {\n      return (_emscripten_stack_restore = wasmExports["_emscripten_stack_restore"])(a0);\n    };\n    var _emscripten_stack_alloc = function __emscripten_stack_alloc(a0) {\n      return (_emscripten_stack_alloc = wasmExports["_emscripten_stack_alloc"])(a0);\n    };\n    var _emscripten_stack_get_current2 = function _emscripten_stack_get_current() {\n      return (_emscripten_stack_get_current2 = wasmExports["emscripten_stack_get_current"])();\n    };\n    var dynCall_jiiii = Module["dynCall_jiiii"] = createExportWrapper("dynCall_jiiii", 5);\n    var dynCall_jii = Module["dynCall_jii"] = createExportWrapper("dynCall_jii", 3);\n    var dynCall_vjii = Module["dynCall_vjii"] = createExportWrapper("dynCall_vjii", 5);\n    var dynCall_vji = Module["dynCall_vji"] = createExportWrapper("dynCall_vji", 4);\n    var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji", 5);\n    var missingLibrarySymbols = ["writeI53ToI64", "writeI53ToI64Clamped", "writeI53ToI64Signaling", "writeI53ToU64Clamped", "writeI53ToU64Signaling", "readI53FromI64", "readI53FromU64", "convertI32PairToI53", "convertU32PairToI53", "stackAlloc", "getTempRet0", "setTempRet0", "exitJS", "growMemory", "inetPton4", "inetNtop4", "inetPton6", "inetNtop6", "readSockaddr", "writeSockaddr", "emscriptenLog", "readEmAsmArgs", "jstoi_q", "listenOnce", "autoResumeAudioContext", "handleException", "keepRuntimeAlive", "runtimeKeepalivePush", "runtimeKeepalivePop", "callUserCallback", "maybeExit", "asmjsMangle", "HandleAllocator", "getNativeTypeSize", "STACK_SIZE", "STACK_ALIGN", "POINTER_SIZE", "ASSERTIONS", "getCFunc", "ccall", "cwrap", "uleb128Encode", "sigToWasmTypes", "generateFuncType", "convertJsFunctionToWasm", "getEmptyTableSlot", "updateTableMap", "getFunctionAddress", "addFunction", "removeFunction", "reallyNegative", "unSign", "strLen", "reSign", "formatString", "intArrayToString", "AsciiToString", "stringToNewUTF8", "stringToUTF8OnStack", "writeArrayToMemory", "registerKeyEventCallback", "maybeCStringToJsString", "findEventTarget", "getBoundingClientRect", "fillMouseEventData", "registerMouseEventCallback", "registerWheelEventCallback", "registerUiEventCallback", "registerFocusEventCallback", "fillDeviceOrientationEventData", "registerDeviceOrientationEventCallback", "fillDeviceMotionEventData", "registerDeviceMotionEventCallback", "screenOrientation", "fillOrientationChangeEventData", "registerOrientationChangeEventCallback", "fillFullscreenChangeEventData", "registerFullscreenChangeEventCallback", "JSEvents_requestFullscreen", "JSEvents_resizeCanvasForFullscreen", "registerRestoreOldStyle", "hideEverythingExceptGivenElement", "restoreHiddenElements", "setLetterbox", "softFullscreenResizeWebGLRenderTarget", "doRequestFullscreen", "fillPointerlockChangeEventData", "registerPointerlockChangeEventCallback", "registerPointerlockErrorEventCallback", "requestPointerLock", "fillVisibilityChangeEventData", "registerVisibilityChangeEventCallback", "registerTouchEventCallback", "fillGamepadEventData", "registerGamepadEventCallback", "registerBeforeUnloadEventCallback", "fillBatteryEventData", "battery", "registerBatteryEventCallback", "setCanvasElementSize", "getCanvasElementSize", "jsStackTrace", "getCallstack", "convertPCtoSourceLocation", "checkWasiClock", "wasiRightsToMuslOFlags", "wasiOFlagsToMuslOFlags", "createDyncallWrapper", "safeSetTimeout", "setImmediateWrapped", "clearImmediateWrapped", "polyfillSetImmediate", "getPromise", "makePromise", "idsToPromises", "makePromiseCallback", "findMatchingCatch", "Browser_asyncPrepareDataCounter", "setMainLoop", "isLeapYear", "ydayFromDate", "arraySum", "addDays", "getSocketFromFD", "getSocketAddress", "FS_unlink", "FS_mkdirTree", "_setNetworkCallback", "heapObjectForWebGLType", "toTypedArrayIndex", "webgl_enable_ANGLE_instanced_arrays", "webgl_enable_OES_vertex_array_object", "webgl_enable_WEBGL_draw_buffers", "webgl_enable_WEBGL_multi_draw", "webgl_enable_EXT_polygon_offset_clamp", "webgl_enable_EXT_clip_control", "webgl_enable_WEBGL_polygon_mode", "emscriptenWebGLGet", "computeUnpackAlignedImageSize", "colorChannelsInGlTextureFormat", "emscriptenWebGLGetTexPixelData", "emscriptenWebGLGetUniform", "webglGetUniformLocation", "webglPrepareUniformLocationsBeforeFirstUse", "webglGetLeftBracePos", "emscriptenWebGLGetVertexAttrib", "__glGetActiveAttribOrUniform", "writeGLArray", "registerWebGlEventCallback", "runAndAbortIfError", "ALLOC_NORMAL", "ALLOC_STACK", "allocate", "writeStringToMemory", "writeAsciiToMemory", "setErrNo", "demangle", "stackTrace", "getFunctionArgsName", "requireRegisteredType", "createJsInvokerSignature", "registerInheritedInstance", "unregisterInheritedInstance", "enumReadValueFromPointer", "validateThis", "getStringOrSymbol", "emval_get_global", "emval_returnValue", "emval_lookupTypes", "emval_addMethodCaller"];\n    missingLibrarySymbols.forEach(missingLibrarySymbol);\n    var unexportedSymbols = ["run", "addOnPreRun", "addOnInit", "addOnPreMain", "addOnExit", "addOnPostRun", "addRunDependency", "removeRunDependency", "out", "err", "callMain", "abort", "wasmMemory", "wasmExports", "writeStackCookie", "checkStackCookie", "convertI32PairToI53Checked", "stackSave", "stackRestore", "ptrToString", "zeroMemory", "getHeapMax", "abortOnCannotGrowMemory", "ENV", "ERRNO_CODES", "strError", "DNS", "Protocols", "Sockets", "initRandomFill", "randomFill", "timers", "warnOnce", "readEmAsmArgsArray", "jstoi_s", "getExecutableName", "dynCallLegacy", "getDynCaller", "dynCall", "asyncLoad", "alignMemory", "mmapAlloc", "wasmTable", "noExitRuntime", "freeTableIndexes", "functionsInTableMap", "setValue", "getValue", "PATH", "PATH_FS", "UTF8Decoder", "UTF8ArrayToString", "UTF8ToString", "stringToUTF8Array", "stringToUTF8", "lengthBytesUTF8", "intArrayFromString", "stringToAscii", "UTF16Decoder", "UTF16ToString", "stringToUTF16", "lengthBytesUTF16", "UTF32ToString", "stringToUTF32", "lengthBytesUTF32", "JSEvents", "specialHTMLTargets", "findCanvasEventTarget", "currentFullscreenStrategy", "restoreOldWindowedStyle", "UNWIND_CACHE", "ExitStatus", "getEnvStrings", "doReadv", "doWritev", "promiseMap", "uncaughtExceptionCount", "exceptionLast", "exceptionCaught", "ExceptionInfo", "Browser", "getPreloadedImageData__data", "wget", "MONTH_DAYS_REGULAR", "MONTH_DAYS_LEAP", "MONTH_DAYS_REGULAR_CUMULATIVE", "MONTH_DAYS_LEAP_CUMULATIVE", "SYSCALLS", "preloadPlugins", "FS_createPreloadedFile", "FS_modeStringToFlags", "FS_getMode", "FS_stdin_getChar_buffer", "FS_stdin_getChar", "FS_createPath", "FS_createDevice", "FS_readFile", "FS", "FS_createDataFile", "FS_createLazyFile", "MEMFS", "TTY", "PIPEFS", "SOCKFS", "tempFixedLengthArray", "miniTempWebGLFloatBuffers", "miniTempWebGLIntBuffers", "GL", "AL", "GLUT", "EGL", "GLEW", "IDBStore", "SDL", "SDL_gfx", "allocateUTF8", "allocateUTF8OnStack", "print", "printErr", "InternalError", "BindingError", "throwInternalError", "throwBindingError", "registeredTypes", "awaitingDependencies", "typeDependencies", "tupleRegistrations", "structRegistrations", "sharedRegisterType", "whenDependentTypesAreResolved", "embind_charCodes", "embind_init_charCodes", "readLatin1String", "getTypeName", "getFunctionName", "heap32VectorToArray", "usesDestructorStack", "createJsInvoker", "UnboundTypeError", "PureVirtualError", "GenericWireTypeSize", "EmValType", "init_embind", "throwUnboundTypeError", "ensureOverloadTable", "exposePublicSymbol", "replacePublicSymbol", "extendError", "createNamedFunction", "embindRepr", "registeredInstances", "getBasestPointer", "getInheritedInstance", "getInheritedInstanceCount", "getLiveInheritedInstances", "registeredPointers", "registerType", "integerReadValueFromPointer", "floatReadValueFromPointer", "readPointer", "runDestructors", "newFunc", "craftInvokerFunction", "embind__requireFunction", "genericPointerToWireType", "constNoSmartPtrRawPointerToWireType", "nonConstNoSmartPtrRawPointerToWireType", "init_RegisteredPointer", "RegisteredPointer", "RegisteredPointer_fromWireType", "runDestructor", "releaseClassHandle", "finalizationRegistry", "detachFinalizer_deps", "detachFinalizer", "attachFinalizer", "makeClassHandle", "init_ClassHandle", "ClassHandle", "throwInstanceAlreadyDeleted", "deletionQueue", "flushPendingDeletes", "delayFunction", "setDelayFunction", "RegisteredClass", "shallowCopyInternalPointer", "downcastPointer", "upcastPointer", "char_0", "char_9", "makeLegalFunctionName", "emval_freelist", "emval_handles", "emval_symbols", "init_emval", "count_emval_handles", "Emval", "emval_methodCallers", "reflectConstruct"];\n    unexportedSymbols.forEach(unexportedRuntimeSymbol);\n    var calledRun;\n    dependenciesFulfilled = function runCaller() {\n      if (!calledRun) run();\n      if (!calledRun) dependenciesFulfilled = runCaller;\n    };\n    function stackCheckInit() {\n      _emscripten_stack_init2();\n      writeStackCookie();\n    }\n    function run() {\n      if (runDependencies > 0) {\n        return;\n      }\n      stackCheckInit();\n      preRun();\n      if (runDependencies > 0) {\n        return;\n      }\n      function doRun() {\n        var _Module$onRuntimeInit;\n        if (calledRun) return;\n        calledRun = true;\n        Module["calledRun"] = true;\n        if (ABORT) return;\n        initRuntime();\n        readyPromiseResolve(Module);\n        (_Module$onRuntimeInit = Module["onRuntimeInitialized"]) === null || _Module$onRuntimeInit === void 0 || _Module$onRuntimeInit.call(Module);\n        assert(!Module["_main"], \'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]\');\n        postRun();\n      }\n      if (Module["setStatus"]) {\n        Module["setStatus"]("Running...");\n        setTimeout(function () {\n          setTimeout(function () {\n            return Module["setStatus"]("");\n          }, 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n      checkStackCookie();\n    }\n    if (Module["preInit"]) {\n      if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];\n      while (Module["preInit"].length > 0) {\n        Module["preInit"].pop()();\n      }\n    }\n    run();\n    moduleRtn = readyPromise;\n    var _loop = function _loop() {\n      var prop = _Object$keys2[_i2];\n      if (!(prop in moduleArg)) {\n        Object.defineProperty(moduleArg, prop, {\n          configurable: true,\n          get: function get() {\n            abort("Access to module property (\'".concat(prop, "\') is no longer possible via the module constructor argument; Instead, use the result of the module constructor."));\n          }\n        });\n      }\n    };\n    for (var _i2 = 0, _Object$keys2 = Object.keys(Module); _i2 < _Object$keys2.length; _i2++) {\n      _loop();\n    }\n    return moduleRtn;\n  };\n})();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ALCHERA_AES256);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///204\n')},96:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AlcheraAES256SDK__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(734);\n/* harmony import */ var _AlcheraAES256SDK__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_AlcheraAES256SDK__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_AlcheraAES256SDK__WEBPACK_IMPORTED_MODULE_0__.AlcheraAES256);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUQ7QUFFbkQsaUVBQWVBLDREQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQWxjaGVyYUFFUzI1NlNESy8uL3NyYy9tYWluLmpzPzU2ZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWxjaGVyYUFFUzI1NiB9IGZyb20gXCIuL0FsY2hlcmFBRVMyNTZTREtcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFsY2hlcmFBRVMyNTY7XHJcbiJdLCJuYW1lcyI6WyJBbGNoZXJhQUVTMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///96\n')},734:function(__unused_webpack_module,exports,__webpack_require__){eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AlcheraAES256 = void 0;\nconst alchera_aes256_1 = __importDefault(__webpack_require__(204));\nclass AlcheraAES256 {\n    constructor(resourceURL) {\n        this.sdk = null;\n        this.loaded = false;\n        this.isLoaded = () => {\n            return this.loaded;\n        };\n        this.encrypt = (value = "") => {\n            if (!this.sdk)\n                throw new Error("encrypt sdk is not exist");\n            return this.sdk.encrypt(value);\n        };\n        this.decrypt = (value = "") => {\n            if (!this.sdk)\n                throw new Error("encrypt sdk is not exist");\n            return this.sdk.decrypt(value);\n        };\n        this.init(resourceURL);\n    }\n    init(resourceURL) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.info("encrypt sdk loading...");\n            try {\n                const module = yield (0, alchera_aes256_1.default)({\n                    locateFile: function (path) {\n                        const baseURL = window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf("/"));\n                        const isDefault = typeof resourceURL === "undefined" || !resourceURL;\n                        const defaultPath = baseURL + "/" + path;\n                        if (isDefault)\n                            return defaultPath;\n                        if (!resourceURL.endsWith("/")) {\n                            resourceURL = resourceURL + "/";\n                        }\n                        return resourceURL + path;\n                    },\n                });\n                this.sdk = module.AES256.getInstance();\n                this.loaded = true;\n                console.info("encrypt sdk loaded");\n            }\n            catch (error) {\n                console.error("Error loading encrypt sdk module:", error);\n            }\n        });\n    }\n    release() {\n        if (!this.sdk)\n            throw new Error("encrypt sdk is not exist");\n        this.sdk.releaseInstance();\n    }\n    get version() {\n        return "v1.0.6";\n    }\n}\nexports.AlcheraAES256 = AlcheraAES256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1FQUFzQztBQUV0QyxNQUFhLGFBQWE7SUFJeEIsWUFBWSxXQUFtQjtRQUgvQixRQUFHLEdBQ0QsSUFBSSxDQUFDO1FBQ1AsV0FBTSxHQUFZLEtBQUssQ0FBQztRQW1DakIsYUFBUSxHQUFHLEdBQVksRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQyxDQUFDO1FBRUssWUFBTyxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBVSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDM0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUFFSyxZQUFPLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFVLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUMzRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQztRQTdDQSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFYSxJQUFJLENBQUMsV0FBbUI7O1lBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUM7Z0JBRUgsTUFBTSxNQUFNLEdBQUcsTUFBTSw0QkFBTSxFQUFDO29CQUMxQixVQUFVLEVBQUUsVUFBVSxJQUFZO3dCQUVoQyxNQUFNLE9BQU8sR0FDWCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUM1RyxNQUFNLFNBQVMsR0FBRyxPQUFPLFdBQVcsS0FBSyxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUM7d0JBQ3JFLE1BQU0sV0FBVyxHQUFHLE9BQU8sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO3dCQUN6QyxJQUFJLFNBQVM7NEJBQUUsT0FBTyxXQUFXLENBQUM7d0JBRWxDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7NEJBQy9CLFdBQVcsR0FBRyxXQUFXLEdBQUcsR0FBRyxDQUFDO3dCQUNsQyxDQUFDO3dCQUVELE9BQU8sV0FBVyxHQUFHLElBQUksQ0FBQztvQkFDNUIsQ0FBQztpQkFDRixDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUV2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUQsQ0FBQztRQUNILENBQUM7S0FBQTtJQWdCTSxPQUFPO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRjtBQTVERCxzQ0E0REMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BbGNoZXJhQUVTMjU2U0RLLy4vc3JjL0FsY2hlcmFBRVMyNTZTREsudHM/ZTc4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQUVTMjU2IGZyb20gXCIuL2FsY2hlcmFfYWVzMjU2XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQWxjaGVyYUFFUzI1NiB7XHJcbiAgc2RrOiB7IGVuY3J5cHQ6ICh2YWx1ZTogc3RyaW5nKSA9PiBzdHJpbmc7IGRlY3J5cHQ6ICh2YWx1ZTogc3RyaW5nKSA9PiBzdHJpbmc7IHJlbGVhc2VJbnN0YW5jZTogKCkgPT4gdm9pZCB9IHwgbnVsbCA9XHJcbiAgICBudWxsO1xyXG4gIGxvYWRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIGNvbnN0cnVjdG9yKHJlc291cmNlVVJMOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuaW5pdChyZXNvdXJjZVVSTCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGluaXQocmVzb3VyY2VVUkw6IHN0cmluZykge1xyXG4gICAgY29uc29sZS5pbmZvKFwiZW5jcnlwdCBzZGsgbG9hZGluZy4uLlwiKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgY29uc3QgbW9kdWxlID0gYXdhaXQgQUVTMjU2KHtcclxuICAgICAgICBsb2NhdGVGaWxlOiBmdW5jdGlvbiAocGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAvL3NhbXBsZSBpbXBsZW1lbnRhdGlvblxyXG4gICAgICAgICAgY29uc3QgYmFzZVVSTCA9XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDAsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5sYXN0SW5kZXhPZihcIi9cIikpO1xyXG4gICAgICAgICAgY29uc3QgaXNEZWZhdWx0ID0gdHlwZW9mIHJlc291cmNlVVJMID09PSBcInVuZGVmaW5lZFwiIHx8ICFyZXNvdXJjZVVSTDtcclxuICAgICAgICAgIGNvbnN0IGRlZmF1bHRQYXRoID0gYmFzZVVSTCArIFwiL1wiICsgcGF0aDtcclxuICAgICAgICAgIGlmIChpc0RlZmF1bHQpIHJldHVybiBkZWZhdWx0UGF0aDtcclxuXHJcbiAgICAgICAgICBpZiAoIXJlc291cmNlVVJMLmVuZHNXaXRoKFwiL1wiKSkge1xyXG4gICAgICAgICAgICByZXNvdXJjZVVSTCA9IHJlc291cmNlVVJMICsgXCIvXCI7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJlc291cmNlVVJMICsgcGF0aDtcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuc2RrID0gbW9kdWxlLkFFUzI1Ni5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICBjb25zb2xlLmluZm8oXCJlbmNyeXB0IHNkayBsb2FkZWRcIik7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyBlbmNyeXB0IHNkayBtb2R1bGU6XCIsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0xvYWRlZCA9ICgpOiBib29sZWFuID0+IHtcclxuICAgIHJldHVybiB0aGlzLmxvYWRlZDtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgZW5jcnlwdCA9ICh2YWx1ZSA9IFwiXCIpOiBzdHJpbmcgPT4ge1xyXG4gICAgaWYgKCF0aGlzLnNkaykgdGhyb3cgbmV3IEVycm9yKFwiZW5jcnlwdCBzZGsgaXMgbm90IGV4aXN0XCIpO1xyXG4gICAgcmV0dXJuIHRoaXMuc2RrLmVuY3J5cHQodmFsdWUpO1xyXG4gIH07XHJcblxyXG4gIHB1YmxpYyBkZWNyeXB0ID0gKHZhbHVlID0gXCJcIik6IHN0cmluZyA9PiB7XHJcbiAgICBpZiAoIXRoaXMuc2RrKSB0aHJvdyBuZXcgRXJyb3IoXCJlbmNyeXB0IHNkayBpcyBub3QgZXhpc3RcIik7XHJcbiAgICByZXR1cm4gdGhpcy5zZGsuZGVjcnlwdCh2YWx1ZSk7XHJcbiAgfTtcclxuXHJcbiAgcHVibGljIHJlbGVhc2UoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2RrKSB0aHJvdyBuZXcgRXJyb3IoXCJlbmNyeXB0IHNkayBpcyBub3QgZXhpc3RcIik7XHJcbiAgICB0aGlzLnNkay5yZWxlYXNlSW5zdGFuY2UoKTtcclxuICB9XHJcblxyXG4gIGdldCB2ZXJzaW9uKCkge1xuICAgIHJldHVybiBcInYxLjAuNlwiO1xuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///734\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__=__webpack_require__(96);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));